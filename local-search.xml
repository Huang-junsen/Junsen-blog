<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript内功修炼：编译原理、执行上下文与作用域链全方位实战解析</title>
    <link href="/2024/03/17/JavaScript%E5%86%85%E5%8A%9F%E4%BF%AE%E7%82%BC%EF%BC%9A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%81%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%85%A8%E6%96%B9%E4%BD%8D%E5%AE%9E%E6%88%98%E8%A7%A3%E6%9E%90/"/>
    <url>/2024/03/17/JavaScript%E5%86%85%E5%8A%9F%E4%BF%AE%E7%82%BC%EF%BC%9A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%81%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%85%A8%E6%96%B9%E4%BD%8D%E5%AE%9E%E6%88%98%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript内功修炼：编译原理、执行上下文与作用域链全方位实战解析"><a href="#JavaScript内功修炼：编译原理、执行上下文与作用域链全方位实战解析" class="headerlink" title="JavaScript内功修炼：编译原理、执行上下文与作用域链全方位实战解析"></a>JavaScript内功修炼：编译原理、执行上下文与作用域链全方位实战解析</h1><p>尽管通常将 JavaScript 视为“动态”或“解释型”语言，但它不同于传统预编译语言之处在于，JavaScript 代码不是提前编译的，且编译结果不能直接移植到其他环境。JavaScript被归类为“动态”或“解释执行”语言，主要是由于以下两个方面的特点：</p><ol><li>动态类型系统：在 JavaScript 中，变量的类型可以在运行时动态改变。例如，变量 <code>num</code> 可以先初始化为数字 <code>1</code>，然后重新赋值为字符串 <code>&quot;1&quot;</code>。这与静态类型语言（如 Java）中变量声明时即确定类型的机制不同，在 JavaScript 中，变量内存大小由其当前存储的值决定而非声明时指定。</li><li>解释执行：JavaScript 引擎逐行解释并执行代码，而不是像 C++ 或 Java 那样先编译成机器码再执行。这种特性允许代码在运行时被修改和执行，如通过 <code>eval()</code> 函数执行字符串形式的 JavaScript 代码片段。</li></ol><h3 id="编译流程概览"><a href="#编译流程概览" class="headerlink" title="编译流程概览"></a>编译流程概览</h3><h4 id="分词-词法分析（Tokenizing-Lexing）"><a href="#分词-词法分析（Tokenizing-Lexing）" class="headerlink" title="分词&#x2F;词法分析（Tokenizing&#x2F;Lexing）"></a>分词&#x2F;词法分析（Tokenizing&#x2F;Lexing）</h4><p>词法分析是编译过程的第一步，它将源代码分解为一系列有意义的基本单元——词法单元（tokens），比如关键字、标识符、运算符、数字等。例如，对于表达式 <code>var a = 2;</code>，词法分析器会识别出 <code>&#39;var&#39;</code>、<code>&#39;a&#39;</code>、<code>&#39;=&#39;</code> 和 <code>&#39;;&#39;</code> 等词法单元。</p><h4 id="解析-语法分析（Parsing）"><a href="#解析-语法分析（Parsing）" class="headerlink" title="解析&#x2F;语法分析（Parsing）"></a>解析&#x2F;语法分析（Parsing）</h4><p>解析阶段将词法单元流转换为抽象语法树（Abstract Syntax Tree, AST）。AST 是一个结构化的树形数据模型，表示程序的语法结构。以 <code>var a = 2;</code>为例，对应的 AST 中包含一个顶层节点 <code>VariableDeclaration</code>，下级有 <code>Identifier</code>（<code>a</code>）节点和 <code>AssignmentExpression</code> 节点，后者又有一个子节点 <code>NumericLiteral</code>（值为 <code>2</code>）。AST 描述了代码的逻辑层次关系，便于后续编译或解释阶段使用。</p><h4 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h4><p>代码生成阶段将 AST 转换为可执行代码。对于给定的语句 <code>var a = 2;</code>，目标是在执行时创建变量 <code>a</code>，分配内存，并将数值 <code>2</code> 存储至该内存地址中。JavaScript 引擎不仅在执行前进行编译，还会进行即时编译（JIT）、延迟编译等多种优化手段来提升性能。</p><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><ul><li>构造函数（constructor）：构造函数是用于创建对象的特殊函数，通过 <code>new</code> 关键字调用来创建新的对象，并将对象的原型指向构造函数的原型（prototype）。</li><li>原型（prototype）：每个对象都具有一个特殊属性 <code>__proto__</code>，指向该对象的构造函数的原型对象。构造函数的 <code>prototype</code> 属性则指向了该构造函数创建的所有实例对象的原型对象。</li><li>原型链（prototype chain）：原型链是通过对象的 <code>__proto__</code> 属性构成的链式结构，用于实现对象之间的继承关系。当访问对象的属性时，JavaScript 引擎会沿着原型链向上查找，直到找到匹配的属性或者到达原型链的顶端（即 <code>Object.prototype</code>）为止。</li><li>总结：<ol><li>构造函数通过 <code>prototype</code> 属性指向原型对象，对象通过 <code>__proto__</code> 属性指向构造函数的原型对象，这构成了原型链。当访问对象属性时，如果原型链查找到顶部仍未找到，则返回 <code>null</code>。</li><li><strong>Function函数是所有函数的祖先函数：</strong><code>Function</code> 函数是 JavaScript 中所有函数的祖先函数，因为所有函数都是由 <code>Function</code> 构造函数创建的。</li><li><strong>所有构造函数都有一个 prototype 属性：</strong> 所有构造函数都具有一个 <code>prototype</code> 属性，这个属性指向了该构造函数创建的所有实例对象的原型对象。</li><li><strong>所有原型对象都有一个 constructor 属性：</strong> 所有原型对象都具有一个 <code>constructor</code> 属性，指向其对应的构造函数。</li><li><strong>所有函数都是对象：</strong> 在 JavaScript 中，函数也是一种对象。函数可以被赋值给变量，作为对象的属性，传递给函数等，因此它们也是对象的一种。</li><li><strong>所有对象都有一个 <code>__proto__</code> 属性：</strong> 所有对象都具有一个 <code>__proto__</code> 属性，它指向了该对象的原型对象。这个属性构成了原型链的基础。</li></ol></li></ul><p><img src="/./../../../../Pictures/n5izdj-2.png" alt="image-20240316135952389"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-comment">// prototype是实例原型</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Junsen&quot;</span>;<br><br><span class="hljs-comment">// 实例对象</span><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">name</span>);<br><span class="hljs-comment">// 实例对象person的__proto__指向实例原型Person.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-comment">// Person构造函数与prototype的桥梁是constructor</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>);<br><br><span class="hljs-comment">// Person的__proto__指向 Function.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-comment">// Person实例原型的__proto__指向 Object.prototyp</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-comment">// Function.prototype.constructor指向 Function</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Function</span>);<br><br><span class="hljs-comment">// Function的__proto__ 指向 Function的实例原型</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-comment">// Function实例原型的__proto__ 指向 Object.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-comment">// Object的__proto__又指向 Function的实例原型prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-comment">// Object实例原型的contructor指向Object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>);<br><br><span class="hljs-comment">// Object实例原型指向null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h2 id="执行上下文与作用域"><a href="#执行上下文与作用域" class="headerlink" title="执行上下文与作用域"></a>执行上下文与作用域</h2><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><ul><li>先进后出后进先出（LIFO）</li><li><strong>动态创建和销毁：</strong> 每当代码开始执行时，js引擎都会创建一个新的执行上下文，并将其推入执行上下文栈的顶部。当代码执行完毕后出栈</li><li><strong>执行上下文栈管理：</strong>执行上下文以堆栈的形式组织，被称为执行上下文栈或者调用栈。栈的特效保证了执行上下文的正确管理和代码执行顺序的维护。</li><li><strong>变量提升：</strong>在执行上下文中，变量和函数声明都会被提升到作用域顶部，这被称为变量提升。这意味着可以在声明前访问变量和函数。</li><li><strong>作用域链接：</strong>每个执行上下文都有一个词法环境，包含了当前作用域的变量和函数声明，同时也引用了外部执行的上下文词法环境，形成作用于链。作用域链决定了变量和函数的查找顺序，</li><li><strong>闭包的产生：</strong> 作用域链的存在使得内部函数可以访问外部的函数的变量，从而形成了闭包，闭包可以保留对其词法作用域的引用，使得函数可以在定义的作用域之外执行，并且仍然可以访问定义时的变量。</li><li><strong>变量和函数的生命周期：</strong> 变量和函数的生命周期与其所在的执行上下文相关联。在执行上下文被销毁时，其中的变量和函数也会被销毁，释放内存空间。</li></ul><h4 id="顺序执行"><a href="#顺序执行" class="headerlink" title="顺序执行"></a>顺序执行</h4><ul><li>代码从上到下执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo1&#x27;</span>);<br><br>&#125;<br><br><span class="hljs-title function_">foo</span>();  <span class="hljs-comment">// foo1</span><br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo2&#x27;</span>);<br><br>&#125;<br><br><span class="hljs-title function_">foo</span>(); <span class="hljs-comment">// foo2</span><br></code></pre></td></tr></table></figure><h4 id="可执行代码"><a href="#可执行代码" class="headerlink" title="可执行代码"></a>可执行代码</h4><ul><li>全局代码（Global code）：全局代码是指全局作用域中执行的代码，即不包含在任何函数内部的代码。当程序启动时，会先执行全局代码。全局代码可以包含变量声明、函数声明、以及其他可执行语句。</li><li>函数代码（Function code）：函数代码是指在函数内部定义的代码块。每当函数调用时，都会创建一个新的执行上下文（Execution Context），并执行函数代码。函数代码可以包含变量声明、语句、和其他函数的定义等。</li><li>eval代码（Eval code）：当使用 <code>eval</code> 函数执行字符串作为 JavaScript 代码时，该代码会被动态解析和执行，并插入到当前执行上下文中。然而，由于 <code>eval</code> 具有动态性，可能导致代码执行的不可预测性和安全性问题，因此应该谨慎使用。</li><li>总结：在 JavaScript 中，可执行代码（executable code）主要分为三种类型：全局代码（global code）、函数代码（function code）和 eval 代码。</li></ul><h4 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h4><ul><li>执行上下文栈（Execution Context Stack）是JavaScript引擎用来管理执行上下文的数据结构。它是一个栈，用于存储当前执行代码的执行上下文。</li><li>每当代码开始执行时都会创新一个新的上下文，并将其推入执行上下文栈的顶部。</li><li>当代码执行完成后，对应的执行执行上下文就会被弹出栈。这种先进后出的方式确保了执行上下文的正确管理，保证了代码的执行顺序。</li><li>执行上下文栈主要的作用是跟踪代码执行的过程中的上下文信息，包含变量、作用域链、this指向等、通过执行上下文栈，JavaScript引擎能够在代码执行过程中准确地确定变量和函数的作用域，以及各种执行环境的关系。</li></ul><h3 id="作用域是什么？"><a href="#作用域是什么？" class="headerlink" title="作用域是什么？"></a>作用域是什么？</h3><blockquote><p>作用域是 JavaScript 中管理变量可见性和生命周期的规则集合。它决定了变量在哪里可以被访问以及何时创建和销毁。作用域链的概念保证了在嵌套的作用域中正确查找变量，而闭包正是由于作用域链的存在，使得内部函数能够访问外部函数的变量，即使在外部函数执行完毕后仍然能够保持对外部变量的引用。</p></blockquote><h4 id="执行上下文栈的模拟"><a href="#执行上下文栈的模拟" class="headerlink" title="执行上下文栈的模拟"></a>执行上下文栈的模拟</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义执行上下文对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecutionContext</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义执行上下文栈</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecutionContextStack</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>    &#125;<br><br>    <span class="hljs-comment">// 推入执行上下文</span><br>    <span class="hljs-title function_">push</span>(<span class="hljs-params">context</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(context);<br>    &#125;<br><br>    <span class="hljs-comment">// 弹出执行上下文</span><br>    <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">pop</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前栈顶执行上下文</span><br>    <span class="hljs-title function_">peek</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 获取执行上下文栈的大小</span><br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="Case1"><a href="#Case1" class="headerlink" title="Case1"></a>Case1</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// case 1</span><br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;global scope&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkscope</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;local scope&quot;</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>();<br>&#125;<br><span class="hljs-title function_">checkscope</span>();<br><br><span class="hljs-comment">// 创建全局上下文栈实例</span><br><span class="hljs-keyword">const</span> ecs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContextStack</span>();<br><br><span class="hljs-comment">// 模拟执行上下文的创建和销毁过程</span><br>ecs.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&#x27;Global&#x27;</span>)) <span class="hljs-comment">// 创建全局执行上下文推入栈中</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkScope</span>(<span class="hljs-params"></span>)&#123;<br>    ecs.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&#x27;checkScope&#x27;</span>)); <span class="hljs-comment">//创建 checkScope 函数执行上下文并推入栈中</span><br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;local scope&quot;</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>        ecs.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&#x27;f&#x27;</span>)); <span class="hljs-comment">//创建f函数执行上下文并推入栈中</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;current context:&#x27;</span>,ecs.<span class="hljs-title function_">peek</span>().<span class="hljs-property">name</span>); <span class="hljs-comment">// 打印当前执行上下文的名称</span><br>        ecs.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 弹出栈顶执行上下文</span><br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">f</span>();<br>    ecs.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 弹出栈顶执行上下文</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">checkScope</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Return value：&quot;</span>, result);<br></code></pre></td></tr></table></figure><ul><li>总结：在这个案例中，<code>checkScope</code>函数被调用后会立即执行，并且在执行过程中会创建一个新的执行上下文<code>checkScope</code>。在<code>checkScope</code>中又定义了个<code>f</code>函数，并且在<code>f</code>函数中访问了外部函数<code>checkScope</code>的scope变量。由于JavaScript的词法作用域规则，<code>f</code>函数在查找变量时会首先查找自身函数的作用域，如果没有就会向上查找,所以获取到了checkScope的scope。因此<code>f</code>函数返回的scope是checkScope的scope值，即<code>local scope</code></li></ul><h5 id="Case2"><a href="#Case2" class="headerlink" title="Case2"></a>Case2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// case 2</span><br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;global scope&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkscope</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;local scope&quot;</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br><span class="hljs-title function_">checkscope</span>()();<br><br><br><span class="hljs-comment">// 创建执行上下文栈实例</span><br><span class="hljs-keyword">const</span> ecs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContextStack</span>();<br><br><span class="hljs-comment">// 模拟执行上下文的创建销毁过程</span><br>ecs.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&#x27;Global&#x27;</span>)); <span class="hljs-comment">// 创建全局执行上下文并推入栈中</span><br><br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;global scope&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkScope</span>(<span class="hljs-params"></span>)&#123;<br>    ecs.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&#x27;checkScope&#x27;</span>)); <span class="hljs-comment">// 创建checkScope的执行上下文并推入栈</span><br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;local scope&#x27;</span>;<br>    <br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>        ecs.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&#x27;f&#x27;</span>)); <span class="hljs-comment">//创建f函数的执行上下文并推入栈中</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Current context：&#x27;</span>, ecs.<span class="hljs-title function_">peek</span>().<span class="hljs-property">name</span>); <span class="hljs-comment">//打印当前执行上下文的名称</span><br>        ecs.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">//弹出栈顶的执行上下文</span><br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <br>    <span class="hljs-keyword">const</span> result = f;<br>    ecs.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 弹出栈顶执行上下文</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">checkScope</span>()();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Return value:&#x27;</span>,result);<br></code></pre></td></tr></table></figure><ul><li>这个案例中，<code>checkScope</code>函数被调用后返回一个内部定义的函数 <code>f</code>。此时并没有立即执行<code>f</code>函数，而是将其作为值通过return返回出去给外部调用。因此外部调用<code>checkScope()()</code>时，实际上是在执行返回的<code>f</code>函数。由于词法作用域的规则，<code>f</code>函数在查找变量时仍会按照静态作用域的规则向上查找外部的作用域。所以返回的结果是<code>local scope</code>。</li></ul><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul><li>在这两个案例中，不同的是第一个是<code>Global上下文</code>、<code>checkScope上下文</code>、<code>f上下文</code>的入栈执行，然后<code>f上下文</code>、<code>checkScope上下文</code>、<code>Global上下文</code>的顺序出栈，第二个案例f函数作为返回值返回来。在外部调用<code>checkScope</code>时然后再调用<code>f</code>函数,所以它们的出入栈顺序是 Global上下文，<code>checkScope</code>上下文，此时<code>checkScope</code>上下文已经执行完毕出栈，但是<code>f</code>函数又被调用了，此时<code>f</code>函数入栈继续执行，执行完毕后出栈，才到<code>Global上下文</code>出栈</li></ul><h2 id="变量对象与作用域链"><a href="#变量对象与作用域链" class="headerlink" title="变量对象与作用域链"></a>变量对象与作用域链</h2><h3 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h3><ul><li><p>JavaScript中的“变量对象”是执行上下文“Execution Context”中用来存储变量和函数声明的内部数据结构，在代码执行过程中起着重要的作用，用来管理变量和函数的创建、访问和执行。</p><ul><li><strong>创建阶段：</strong> 在此阶段，变量对象被创建，并且在变量对象中存储了所有的变量和函数声明。但是这个阶段中，变量和函数声明的实际赋值操作并没执行。</li><li><strong>执行阶段：</strong> 在此阶段，JavaScript引擎会逐行执行代码，并按照代码的顺序对变量对象中的变量进行赋值操作。</li></ul><p>变量对象包含以下内容：</p><ul><li><strong>函数参数：</strong> 在函数上下文中，函数的参数会被存储在变量对象中，每个参数都会被作为变量对象的属性，属性名为参数名，属性值为传入的参数值。如果调用函数时没有提供参数，则对应的属性值为undefined。</li><li><strong>函数声明：</strong> 在函数上下文中，通过function关键字声明的函数会被整体存储在变量对象中。函数声明会被视为变量对象的属性，属性名为函数名，属性值为对应的函数对象。如果变量对象已经存在相同名称的属性，则会完全替换该属性，以最新声明的函数为准。</li><li><strong>变量声明：</strong> 在函数上下文中，通过var关键字声明的变量会被存储在变量对象中。变量声明会被视为变量对象的属性，属性名为变量名，属性值为undefined。如果变量名与已经声明的形式参数或函数名相同，则变量声明不会干扰已经存在的这类属性，即不会覆盖已存在的属性。</li></ul></li></ul><blockquote><p>Vo（Variable Object）和Ao（Activation Object）是早期ECMAScript规范中使用的术语，用于描述执行上下文中变量对象的不同阶段。它们本质上都是同一个东西，只是表现得状态不一样。</p><ul><li>Vo（Variable Object）：这是执行上下文进入创建阶段时生成的内部数据结构，它包含了所有变量声明和函数声明。在这个阶段，只记录变量名和函数声明而不进行实际赋值。</li><li>Ao（Activation Object）：当代码开始执行，即进入执行阶段时，激活对象作为动态生成的对象出现，它用于存储变量的实际值以及对函数引用的访问。Ao是对变量对象的一种扩展，在现代JavaScript引擎中，这个概念通常不再明确区分，而是统一为执行上下文中的一个单一变量对象，并随着执行过程逐步填充变量的实际值。</li></ul><p>在现代JavaScript引擎中，激活对象已经不再是一个显式的概念，而是被整合到执行上下文中的变量对象中。</p></blockquote><h3 id="进入执行上下文"><a href="#进入执行上下文" class="headerlink" title="进入执行上下文"></a>进入执行上下文</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a</span>) &#123;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br><br>  b = <span class="hljs-number">3</span>;<br><br>&#125;<br><br><span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>);<br><br>在进入执行上下文后，这时候的 <span class="hljs-variable constant_">AO</span> 是：<br><span class="hljs-variable constant_">AO</span> = &#123;<br>    <span class="hljs-attr">arguments</span>: &#123;<br>        <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">length</span>: <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">c</span>: reference to <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>)&#123;&#125;,<br>    <span class="hljs-attr">d</span>: <span class="hljs-literal">undefined</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><ul><li>在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">AO</span> = &#123;<br>    <span class="hljs-attr">arguments</span>: &#123;<br>        <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">length</span>: <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">c</span>: reference to <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>)&#123;&#125;,<br>    <span class="hljs-attr">d</span>: reference to <span class="hljs-title class_">FunctionExpression</span> <span class="hljs-string">&quot;d&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>全局上下文的变量对象初始化</strong>：全局上下文的变量对象初始化为全局对象，即全局变量和全局函数都会成为全局对象的属性。</li><li><strong>函数上下文的变量对象初始化</strong>：函数上下文的变量对象初始化只包括 <code>arguments</code> 对象，用于存储传入函数的参数信息。</li><li><strong>进入执行上下文时的变量对象初始化</strong>：在进入执行上下文时，会给变量对象添加形参、函数声明、变量声明等初始的属性值。形参作为属性名，对应的值为传入的参数值；函数声明和变量声明作为属性名，对应的值分别为函数引用和 <code>undefined</code>。</li><li><strong>代码执行阶段的变量对象更新</strong>：在代码执行阶段，会根据代码的逐行执行，对变量对象的属性值进行修改和更新。函数和变量的赋值操作会更新变量对象中对应属性的值。</li></ul><h3 id="自定义Ecs模拟"><a href="#自定义Ecs模拟" class="headerlink" title="自定义Ecs模拟"></a>自定义Ecs模拟</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义执行上下文对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecutionContext</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">variableObject</span> = &#123;&#125;; <span class="hljs-comment">// 变量对象</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">scopeChain</span> = []; <span class="hljs-comment">// 作用域链</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">thisValue</span> = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// this</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义执行上下文栈</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecutionContextStack</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>    &#125;<br><br>    <span class="hljs-comment">// 推入执行上下文</span><br>    <span class="hljs-title function_">push</span>(<span class="hljs-params">context</span>) &#123;<br>        <span class="hljs-comment">// 更新作用域链</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            context.<span class="hljs-property">scopeChain</span> = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">scopeChain</span>, context.<span class="hljs-property">variableObject</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            context.<span class="hljs-property">scopeChain</span> = [context.<span class="hljs-property">variableObject</span>];<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(context);<br>        <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stack&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;context&#x27;</span>,context);<br>    &#125;<br><br>    <span class="hljs-comment">// 弹出执行上下文</span><br>    <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stack&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">pop</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前栈顶执行上下文</span><br>    <span class="hljs-title function_">peek</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 获取执行上下文栈的大小</span><br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Case1-1"><a href="#Case1-1" class="headerlink" title="Case1"></a>Case1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;global scope&quot;</span>; <span class="hljs-comment">// 声明一个全局变量 scope，赋值为 &quot;global scope&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkscope</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 定义函数 checkscope</span><br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;local scope&quot;</span>; <span class="hljs-comment">// 声明一个局部变量 scope，赋值为 &quot;local scope&quot;</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 定义内部函数 f</span><br>        <span class="hljs-keyword">return</span> scope; <span class="hljs-comment">// 返回当前作用域中的 scope 变量的值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>(); <span class="hljs-comment">// 调用内部函数 f 并返回其结果</span><br>&#125;<br><span class="hljs-title function_">checkscope</span>(); <span class="hljs-comment">// 调用函数 checkscope</span><br><br><span class="hljs-comment">// 创建全局上下文栈实例</span><br><span class="hljs-keyword">const</span> ecs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContextStack</span>();<br><br><span class="hljs-comment">// 创建全局执行上下文</span><br><span class="hljs-keyword">const</span> globalContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&quot;global&quot;</span>); <span class="hljs-comment">// 创建全局执行上下文对象，名称为 &quot;global&quot;</span><br>globalContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">scope</span> = <span class="hljs-string">&quot;global scope&quot;</span>; <span class="hljs-comment">// 将全局变量 scope 的值设置为 &quot;global scope&quot;</span><br>ecs.<span class="hljs-title function_">push</span>(globalContext)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;current context:&quot;</span>,ecs.<span class="hljs-title function_">peek</span>().<span class="hljs-property">name</span>); <span class="hljs-comment">// 打印当前执行上下文的名称</span><br><br><span class="hljs-comment">//创建checkScope函数执行上下文。</span><br><span class="hljs-keyword">const</span> checkScopeContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&quot;checkscope&quot;</span>); <span class="hljs-comment">// 创建 checkscope 函数执行上下文对象，名称为 &quot;checkscope&quot;</span><br>checkScopeContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">scope</span> = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 在 checkscope 函数执行上下文中，变量对象中的 scope 属性为 undefined</span><br>checkScopeContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">arguments</span> = &#123;<span class="hljs-attr">length</span>: <span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 在 checkscope 函数执行上下文中，变量对象中的 arguments 属性为一个对象，表示没有传入参数</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkScope</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 定义函数 checkScope</span><br>    ecs.<span class="hljs-title function_">push</span>(checkScopeContext); <span class="hljs-comment">// 将 checkScope 函数执行上下文推入执行上下文栈中，表示进入了 checkScope 函数的执行过程</span><br>checkScopeContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">scope</span> = <span class="hljs-string">&quot;local scope&quot;</span>; <span class="hljs-comment">// 将局部变量 scope 的值设置为 &quot;local scope&quot;，表示进入了 checkScope 函数内部的执行过程</span><br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;local scope&#x27;</span>; <span class="hljs-comment">// 声明一个局部变量 scope，赋值为 &quot;local scope&quot;</span><br>    <span class="hljs-comment">// 创建 f 函数执行上下文</span><br>    <span class="hljs-keyword">const</span> fContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&quot;f&quot;</span>); <span class="hljs-comment">// 创建内部函数 f 的执行上下文对象，名称为 &quot;f&quot;</span><br>    fContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">scope</span> = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 在 f 函数执行上下文中，变量对象中的 scope 属性为 undefined</span><br>    fContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">arguments</span> = &#123;<span class="hljs-attr">length</span>: <span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 在 f 函数执行上下文中，变量对象中的 arguments 属性为一个对象，表示没有传入参数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 定义内部函数 f</span><br>        ecs.<span class="hljs-title function_">push</span>(fContext); <span class="hljs-comment">// 将 f 函数执行上下文推入执行上下文栈中，表示进入了 f 函数的执行过程</span><br>         <span class="hljs-comment">// 模拟 VO 到 AO 的变化</span><br>    fContext.<span class="hljs-property">variableObject</span> = &#123; <span class="hljs-attr">scope</span>: <span class="hljs-string">&quot;local scope&quot;</span> &#125;;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;current context:&quot;</span>,ecs.<span class="hljs-title function_">peek</span>().<span class="hljs-property">name</span>); <span class="hljs-comment">// 打印当前执行上下文的名称</span><br>        ecs.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 弹出栈顶执行上下文，表示退出了 f 函数的执行过程</span><br>        <span class="hljs-keyword">return</span> scope; <span class="hljs-comment">// 返回当前作用域中的 scope 变量的值</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">f</span>(); <span class="hljs-comment">// 调用内部函数 f，并将结果保存在 result 变量中</span><br>    ecs.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 弹出栈顶执行上下文，表示退出了 checkScope 函数的执行过程</span><br>    <span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 返回函数执行结果</span><br>&#125;<br><br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">checkScope</span>(); <span class="hljs-comment">// 调用函数 checkScope，并将结果保存在 result 变量中</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Return value:&#x27;</span>,result); <span class="hljs-comment">// 打印函数执行结果</span><br><br></code></pre></td></tr></table></figure><h4 id="Case2-1"><a href="#Case2-1" class="headerlink" title="Case2"></a>Case2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;global scope&quot;</span>; <span class="hljs-comment">// 声明一个全局变量 scope，赋值为 &quot;global scope&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkscope</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 定义函数 checkscope</span><br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;local scope&quot;</span>; <span class="hljs-comment">// 声明一个局部变量 scope，赋值为 &quot;local scope&quot;</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 定义内部函数 f</span><br>        <span class="hljs-keyword">return</span> scope; <span class="hljs-comment">// 返回当前作用域中的 scope 变量的值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> f; <span class="hljs-comment">// 调用内部函数 f 并返回其结果</span><br>&#125;<br><span class="hljs-title function_">checkscope</span>()(); <span class="hljs-comment">// 调用函数 checkscope</span><br><br><span class="hljs-comment">// 创建全局上下文栈实例</span><br><span class="hljs-keyword">const</span> ecs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContextStack</span>();<br><br><span class="hljs-comment">// 创建全局执行上下文</span><br><span class="hljs-keyword">const</span> globalContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&quot;global&quot;</span>); <span class="hljs-comment">// 创建全局执行上下文对象，名称为 &quot;global&quot;</span><br>globalContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">scope</span> = <span class="hljs-string">&quot;global scope&quot;</span>; <span class="hljs-comment">// 将全局变量 scope 的值设置为 &quot;global scope&quot;</span><br>ecs.<span class="hljs-title function_">push</span>(globalContext)<br><span class="hljs-comment">//创建checkScope函数执行上下文。</span><br><span class="hljs-keyword">const</span> checkScopeContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&quot;checkscope&quot;</span>); <span class="hljs-comment">// 创建 checkscope 函数执行上下文对象，名称为 &quot;checkscope&quot;</span><br>checkScopeContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">scope</span> = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 在 checkscope 函数执行上下文中，变量对象中的 scope 属性为 undefined</span><br>checkScopeContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">arguments</span> = &#123;<span class="hljs-attr">length</span>: <span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 在 checkscope 函数执行上下文中，变量对象中的 arguments 属性为一个对象，表示没有传入参数</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkScope</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 定义函数 checkScope</span><br>    ecs.<span class="hljs-title function_">push</span>(checkScopeContext); <span class="hljs-comment">// 将 checkScope 函数执行上下文推入执行上下文栈中，表示进入了 checkScope 函数的执行过程</span><br>checkScopeContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">scope</span> = <span class="hljs-string">&quot;local scope&quot;</span>; <span class="hljs-comment">// 将局部变量 scope 的值设置为 &quot;local scope&quot;，表示进入了 checkScope 函数内部的执行过程</span><br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;local scope&#x27;</span>; <span class="hljs-comment">// 声明一个局部变量 scope，赋值为 &quot;local scope&quot;</span><br>    <span class="hljs-comment">// 创建 f 函数执行上下文</span><br>    <span class="hljs-keyword">const</span> fContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionContext</span>(<span class="hljs-string">&quot;f&quot;</span>); <span class="hljs-comment">// 创建内部函数 f 的执行上下文对象，名称为 &quot;f&quot;</span><br>    fContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">scope</span> = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 在 f 函数执行上下文中，变量对象中的 scope 属性为 undefined</span><br>    fContext.<span class="hljs-property">variableObject</span>.<span class="hljs-property">arguments</span> = &#123;<span class="hljs-attr">length</span>: <span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 在 f 函数执行上下文中，变量对象中的 arguments 属性为一个对象，表示没有传入参数</span><br>   <br>     <span class="hljs-comment">// 定义内部函数 f</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>         ecs.<span class="hljs-title function_">push</span>(fContext); <span class="hljs-comment">// 将 f 函数执行上下文推入执行上下文栈中，表示进入了 f 函数的执行过程</span><br>         <span class="hljs-comment">// 模拟 VO 到 AO 的变化</span><br>    fContext.<span class="hljs-property">variableObject</span> = &#123; <span class="hljs-attr">scope</span>: <span class="hljs-string">&quot;local scope&quot;</span> &#125;;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;current context:&quot;</span>,ecs.<span class="hljs-title function_">peek</span>().<span class="hljs-property">name</span>); <span class="hljs-comment">// 打印当前执行上下文的名称</span><br>        ecs.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 弹出栈顶执行上下文，表示退出了 f 函数的执行过程</span><br>        <span class="hljs-keyword">return</span> scope; <span class="hljs-comment">// 返回当前作用域中的 scope 变量的值</span><br>    &#125;<br>    ecs.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 弹出栈顶执行上下文，表示退出了 checkScope 函数的执行过程</span><br>    <span class="hljs-keyword">return</span> f; <span class="hljs-comment">// 返回函数执行结果</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ecs&#x27;</span>,ecs.<span class="hljs-title function_">size</span>())<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">checkScope</span>()();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Return value:&#x27;</span>,result); <span class="hljs-comment">// 打印函数执行结果</span><br><br><br></code></pre></td></tr></table></figure><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>在 JavaScript 中，作用域链是理解变量访问规则的关键概念之一。简单来说，作用域链决定了在代码执行过程中如何查找变量。下面是对作用域链的优化解释：</p><ol><li><strong>ES6 前后的变量声明方式</strong>：<ul><li>在 ES6 之前，我们使用 <code>var</code> 关键字声明变量时，它们会被提升到所在函数作用域的顶部，而没有块级作用域的概念。这意味着变量的作用域由函数的边界确定。</li><li>ES6 引入了 <code>let</code> 和 <code>const</code> 关键字，它们允许我们在任意代码块（比如 <code>&#123;&#125;</code>）内创建变量，从而引入了块级作用域的概念。这让我们更加灵活地管理变量的作用域范围。</li></ul></li><li><strong>作用域链的形成</strong>：<ul><li>作用域链并不仅仅是由大括号的嵌套关系决定的，而是由函数的嵌套关系决定的。在 JavaScript 中，函数内部可以访问外部的变量，这导致了作用域链的形成。</li><li>每当 JavaScript 引擎执行代码时，会创建一个执行上下文，并按照函数的嵌套关系形成作用域链。作用域链的顶部是当前执行代码的作用域，然后依次向上查找，直到找到变量或达到全局作用域。</li></ul></li><li><strong>作用域链的查找规则</strong>：<ul><li>JavaScript 引擎按照就近原则从当前作用域开始查找变量。如果在当前作用域找不到变量，则会依次向上层作用域查找，直到找到变量或者达到全局作用域为止。</li></ul></li><li><strong>全局作用域的特殊性</strong>：<ul><li>全局作用域是所有函数作用域的外层作用域。这是因为 JavaScript 引擎在执行代码时首先创建一个全局执行上下文，其中包含了整个代码的执行环境。函数在定义时会捕获所在的作用域链，因此可以访问外部的变量。</li></ul></li></ol><blockquote><p>总之，作用域链决定了 JavaScript 中变量的访问规则，而理解作用域链对于编写高质量的 JavaScript 代码至关重要。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全局作用域</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;global&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 一级作用域</span><br>    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;outer&quot;</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// 二级作用域</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 在这里访问变量 x</span><br>    &#125;<br><br>    <span class="hljs-title function_">fn2</span>(); <span class="hljs-comment">// 调用 fn2 函数</span><br>&#125;<br><br><span class="hljs-title function_">fn1</span>(); <span class="hljs-comment">// 调用 fn1 函数</span><br><br></code></pre></td></tr></table></figure><p>在这个例子中，我们在不同的作用域中定义了同名的变量 <code>x</code>。现在让我们来看一下执行时的作用域链：</p><ol><li>在 <code>fn2</code> 函数内部，我们尝试访问变量 <code>x</code>。由于 <code>fn2</code> 内部并没有定义变量 <code>x</code>，JavaScript 引擎会沿着作用域链向上查找。</li><li>在 <code>fn2</code> 函数的外部（即 <code>fn1</code> 函数内部），我们定义了变量 <code>x</code>，其值为 <code>&quot;outer&quot;</code>。因此，JavaScript 引擎在这一级找到了变量 <code>x</code>，并将其值打印出来。</li><li>如果在 <code>fn1</code> 函数内部也没有定义变量 <code>x</code>，JavaScript 引擎会继续向上查找，最终到达全局作用域。在全局作用域中，我们定义了变量 <code>x</code>，其值为 <code>&quot;global&quot;</code>。</li></ol><p>所以，最终输出的结果将会是 <code>&quot;outer&quot;</code>，因为在作用域链中，<code>fn2</code> 函数可以访问到 <code>fn1</code> 函数内部定义的变量 <code>x</code>，而不是全局作用域中的变量 <code>x</code>。</p><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>在浏览器执行 JavaScript 代码时，首先进行的是预解析（Hoisting），这是一个重要的步骤。预解析阶段并不是直接执行代码，而是对代码进行加工处理，以便后续的逐行执行。</p><p>在预解析阶段，主要有以下几个规则：</p><ol><li><strong>变量和函数声明提升</strong>：<ul><li>使用 <code>var</code> 关键字声明的变量以及函数声明会被提升到当前作用域的顶部。这意味着变量和函数可以在它们被声明之前被引用。</li><li>使用 <code>let</code> 和 <code>const</code> 关键字声明的变量不会被提升，它们只能在声明后才能被访问。</li></ul></li><li><strong>变量与函数同名时的处理</strong>：<ul><li>如果在同一个作用域内，既有变量又有函数使用了相同的名称，那么函数声明会优先于变量声明被提升到作用域顶部。</li><li>这意味着在预解析阶段，同名函数会覆盖同名变量的声明，因此在预解析后，该名称会被认定为函数。</li></ul></li><li><strong>代码的顺序保持不变</strong>：<ul><li>在进行预解析后，虽然变量和函数的声明被提升到了作用域顶部，但是原始代码的书写顺序不会改变。预解析只是将声明提升到了最顶部，而不会改变代码的执行顺序。</li></ul></li></ol><p>总的来说，预解析是 JavaScript 在执行之前对代码进行的一种预处理，它确保了变量和函数的声明在执行时可以被正确地访问。理解预解析对于理解 JavaScript 的执行机制是非常重要的。</p><h3 id="预解析练习1"><a href="#预解析练习1" class="headerlink" title="预解析练习1"></a>预解析练习1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-title function_">fun</span>()<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">456</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> var num;</span><br><span class="hljs-comment"> function fun()&#123;</span><br><span class="hljs-comment">    var num;</span><br><span class="hljs-comment">    console.log(num); undefined</span><br><span class="hljs-comment">    num = 456;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">num = 123;</span><br><span class="hljs-comment">fun();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="预解析练习2"><a href="#预解析练习2" class="headerlink" title="预解析练习2"></a>预解析练习2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">666</span>;<br><span class="hljs-title function_">test</span>()<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">777</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">888</span>;<br>    <span class="hljs-keyword">let</span> c = <span class="hljs-number">999</span>;<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">var a;</span><br><span class="hljs-comment">function test()&#123;</span><br><span class="hljs-comment">    var b;</span><br><span class="hljs-comment">    var a;</span><br><span class="hljs-comment">    b = 777;</span><br><span class="hljs-comment">    console.log(a); undefined</span><br><span class="hljs-comment">    console.log(b); 777</span><br><span class="hljs-comment">    console.log(c); 报错</span><br><span class="hljs-comment">    a = 888;</span><br><span class="hljs-comment">    let c = 999;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">a = 666;</span><br><span class="hljs-comment">test() */</span><br></code></pre></td></tr></table></figure><h3 id="预解析练习3"><a href="#预解析练习3" class="headerlink" title="预解析练习3"></a>预解析练习3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;demo() 1&#x27;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;demo() 2&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title function_">demo</span>()<br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">在es6之前没有块级作用域，并没有将下面的函数定义到其他函数中所以这两个函数是全局作用域的。</span><br><span class="hljs-comment">注意点：高级浏览器不会对花括号中的函数进行函数提升，只会在低级浏览器中按照正常方式解析,</span><br><span class="hljs-comment">（低级浏览器ie11以下的）正常情况是输出demo() 1，但在低级浏览器中会输出demo() 2</span><br><span class="hljs-comment">function demo()&#123;</span><br><span class="hljs-comment">    console.log(&#x27;demo() 1&#x27;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">function demo()&#123;</span><br><span class="hljs-comment">    console.log(&#x27;demo() 2&#x27;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">if(true)&#123;&#125;else&#123;&#125;</span><br><span class="hljs-comment">demo()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="预解析练习4"><a href="#预解析练习4" class="headerlink" title="预解析练习4"></a>预解析练习4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br><span class="hljs-keyword">var</span> value = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">value</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fn value&#x27;</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">注意点：变量与函数名称相同时，函数的优先级高于变量</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">function value()&#123;</span><br><span class="hljs-comment">    console.log(&#x27;fn value&#x27;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">console.log(value)</span><br><span class="hljs-comment">var value;</span><br><span class="hljs-comment">value = 123;</span><br><span class="hljs-comment">console.log(value)</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vite项目初始化基建</title>
    <link href="/2024/02/20/vite%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E5%BB%BA/"/>
    <url>/2024/02/20/vite%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="配置eslint"><a href="#配置eslint" class="headerlink" title="配置eslint"></a>配置eslint</h2><h3 id="什么是eslint"><a href="#什么是eslint" class="headerlink" title="什么是eslint?"></a>什么是eslint?</h3><blockquote><p>ESLint 是一个 JavaScript 和 TypeScript 的静态代码分析工具，它用于识别代码中的问题并提供一致性和规范性。简单来说，它的作用是：</p><ol><li><strong>检测错误和潜在的问题：</strong> ESLint 可以帮助你找到代码中的错误、潜在的 bug 以及不规范的写法，从而提高代码的质量和稳定性。</li><li><strong>强制执行代码风格规范：</strong> 它可以根据预定义的规则或自定义的规则来强制执行一致的代码风格，以确保团队成员之间的代码风格一致，提高代码的可读性和可维护性。</li><li><strong>提供自定义规则和插件支持：</strong> ESLint 允许你根据项目的特定需求定义自定义规则，并且支持各种插件，可以满足不同项目的特定需求。</li></ol><p>总的来说，ESLint 可以帮助开发人员编写更加干净、可靠和符合规范的代码。</p></blockquote><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 方案<span class="hljs-number">1</span> <br>pnpm i -D eslint<br></code></pre></td></tr></table></figure><h3 id="规则方案"><a href="#规则方案" class="headerlink" title="规则方案"></a>规则方案</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 使用集成方案，内置好了所需规则<br>pnpm i -D @antfu/eslint-config <br><br># eslint默认方案，通过命令初始化eslint规则<br>npx eslint --init<br></code></pre></td></tr></table></figure><h4 id="eslint集成方案"><a href="#eslint集成方案" class="headerlink" title="eslint集成方案"></a>eslint集成方案</h4><blockquote><p>先安装方案一的@antfu&#x2F;eslint-config </p><p>在根目录新建 eslint.config.js即可</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> antfu <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@antfu/eslint-config&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">antfu</span>(&#123;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="eslint初始化默认方案（可选）"><a href="#eslint初始化默认方案（可选）" class="headerlink" title="eslint初始化默认方案（可选）"></a>eslint初始化默认方案（可选）</h4><h5 id="第一步-选择检测类型"><a href="#第一步-选择检测类型" class="headerlink" title="第一步 选择检测类型"></a>第一步 选择检测类型</h5><ul><li><p>仅检查语法</p></li><li><p>检查语法并查找问题</p></li><li><p>若要检查语法、寻找问题并胁迫执行程式码样式</p><p><strong>选择第二个，To check syntax and find problems</strong></p></li></ul><p><img src="https://tuchuang.junsen.online/i/2024/02/20/cjxore-2.png" alt="image-20240220075859922"></p><h5 id="第二步-选择项目是什么类型的模块"><a href="#第二步-选择项目是什么类型的模块" class="headerlink" title="第二步 选择项目是什么类型的模块"></a>第二步 选择项目是什么类型的模块</h5><p><strong>有以下三个选项，根据项目所需选择，这里使用的是js模块选择第一个即可</strong></p><ul><li>JavaScript模块（导入&#x2F;导出）</li><li>CommonJS（require&#x2F;exports）</li><li>没有这些</li></ul><p><img src="https://tuchuang.junsen.online/i/2024/02/20/dcgx0e-2.png" alt="image-20240220080700457"></p><h5 id="第三步-选择所使用的框架-根据你的项目选择即可"><a href="#第三步-选择所使用的框架-根据你的项目选择即可" class="headerlink" title="第三步 选择所使用的框架 根据你的项目选择即可"></a>第三步 选择所使用的框架 根据你的项目选择即可</h5><p><img src="https://tuchuang.junsen.online/i/2024/02/20/ddcik6-2.png" alt="image-20240220080847042"></p><h5 id="第四步-是否使用了ts-根据自己项目的选择"><a href="#第四步-是否使用了ts-根据自己项目的选择" class="headerlink" title="第四步 是否使用了ts,根据自己项目的选择"></a>第四步 是否使用了ts,根据自己项目的选择</h5><p><img src="https://tuchuang.junsen.online/i/2024/02/20/ddyrnf-2.png" alt="image-20240220080951098"></p><h5 id="第五步-选择运行环境，一般选浏览器，也就是第一个browser"><a href="#第五步-选择运行环境，一般选浏览器，也就是第一个browser" class="headerlink" title="第五步 选择运行环境，一般选浏览器，也就是第一个browser"></a>第五步 选择运行环境，一般选浏览器，也就是第一个browser</h5><p><img src="https://tuchuang.junsen.online/i/2024/02/20/defi6y-2.png" alt="image-20240220081029606"></p><h5 id="第六步-选择配置文件的类型，一般第一个即可"><a href="#第六步-选择配置文件的类型，一般第一个即可" class="headerlink" title="第六步 选择配置文件的类型，一般第一个即可"></a>第六步 选择配置文件的类型，一般第一个即可</h5><p><img src="https://tuchuang.junsen.online/i/2024/02/20/dezy1j-2.png" alt="image-20240220081125789"></p><h5 id="第七步-是否需要以下依赖，直接yes就行了，如果不用选no"><a href="#第七步-是否需要以下依赖，直接yes就行了，如果不用选no" class="headerlink" title="第七步 是否需要以下依赖，直接yes就行了，如果不用选no"></a>第七步 是否需要以下依赖，直接yes就行了，如果不用选no</h5><p><img src="https://tuchuang.junsen.online/i/2024/02/20/dfqdaq-2.png" alt="image-20240220081248294"></p><h5 id="第八步-选择安装依赖的方式，根据你项目所需的包管理选择"><a href="#第八步-选择安装依赖的方式，根据你项目所需的包管理选择" class="headerlink" title="第八步 选择安装依赖的方式，根据你项目所需的包管理选择"></a>第八步 选择安装依赖的方式，根据你项目所需的包管理选择</h5><p><img src="https://tuchuang.junsen.online/i/2024/02/20/dgn0by-2.png" alt="image-20240220081400408"></p><p><strong>执行完毕后的样子，根目录会多出 .eslintrc.cjs 的文件，在里面配置规则即可</strong></p><p><img src="https://tuchuang.junsen.online/i/2024/02/20/dhjk9n-2.png" alt="image-20240220081552312"></p><h3 id="vscode-settings-json"><a href="#vscode-settings-json" class="headerlink" title=".vscode&#x2F;settings.json"></a>.vscode&#x2F;settings.json</h3><blockquote><p>这个配置文件是用来配置编辑器（如 VSCode）的，主要针对 ESLint 和 Prettier 的设置。具体含义如下：</p><ul><li><code>&quot;eslint.experimental.useFlatConfig&quot;: true</code>: 启用 ESLint 的扁平配置支持。</li><li><code>&quot;prettier.enable&quot;: false</code>: 禁用默认的格式化程序，改用 ESLint 来格式化代码。</li><li><code>&quot;editor.formatOnSave&quot;: false</code>: 关闭在保存时自动格式化代码的功能。</li><li><code>&quot;editor.codeActionsOnSave&quot;</code>: 在保存时执行的代码操作，其中 <code>&quot;source.fixAll.eslint&quot;: &quot;explicit&quot;</code> 表示显式地自动修复 ESLint 报告的所有问题，<code>&quot;source.organizeImports&quot;: &quot;never&quot;</code> 表示不进行导入组织操作。</li><li><code>&quot;eslint.rules.customizations&quot;</code>: 定制 ESLint 规则，将一些样式规则的严重程度设置为 “off”，这样编辑器会静默地忽略这些规则，但仍会自动修复它们。</li><li><code>&quot;eslint.validate&quot;</code>: 启用 ESLint 对各种语言的验证，包括 JavaScript、TypeScript、Vue、HTML、Markdown 等。</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 启用 ESLint 的扁平配置支持</span><br>  <span class="hljs-attr">&quot;eslint.experimental.useFlatConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// 禁用默认的格式化程序，改用 ESLint</span><br>  <span class="hljs-attr">&quot;prettier.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// 自动修复</span><br>  <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explicit&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;source.organizeImports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// 在编辑器中静默规避样式规则，但仍然自动修复它们</span><br>  <span class="hljs-attr">&quot;eslint.rules.customizations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;style/*&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;format/*&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*-indent&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*-spacing&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*-spaces&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*-order&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*-dangle&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*-newline&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*quotes&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*semi&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;severity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span> <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-comment">// 对所有支持的语言启用 ESLint</span><br>  <span class="hljs-attr">&quot;eslint.validate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;javascript&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;javascriptreact&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;typescript&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;typescriptreact&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;html&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;markdown&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;json&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;jsonc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;yaml&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;toml&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="配置husky"><a href="#配置husky" class="headerlink" title="配置husky"></a>配置husky</h2><h3 id="安装husky与lint-staged"><a href="#安装husky与lint-staged" class="headerlink" title="安装husky与lint-staged"></a>安装husky与lint-staged</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pnpm install -D husky lint-staged<br></code></pre></td></tr></table></figure><h3 id="初始化husky"><a href="#初始化husky" class="headerlink" title="初始化husky"></a>初始化husky</h3><blockquote><p>在package.json scripts里面新增下面语句初始化husky,也可以执行执行 npx husky-init，执行完毕后会在项目根目录自动新增.husky文件夹</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;prepare&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;husky install&quot;</span><br></code></pre></td></tr></table></figure><h3 id="指定husky给lint-staged执行"><a href="#指定husky给lint-staged执行" class="headerlink" title="指定husky给lint-staged执行"></a>指定husky给lint-staged执行</h3><blockquote><p>使用 lint-staged 的主要原因是它可以让 lint 工具只针对暂存区中的文件运行，而不是整个项目，这样可以提高 lint 的效率，只检查即将提交的代码，而不是整个项目的所有代码。这在大型项目中尤其有用，因为 lint-staged 可以帮助减少 lint 运行的时间，提高开发效率。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">npx husky <span class="hljs-keyword">add</span><span class="language-bash"> .husky/pre-commit <span class="hljs-string">&quot;npx lint-staged&quot;</span></span><br></code></pre></td></tr></table></figure><h2 id="配置commitlint"><a href="#配置commitlint" class="headerlink" title="配置commitlint"></a>配置commitlint</h2><blockquote><p>由于实际开发中会多人参与，对于我们的commit信息，也是有统一规范的，不能随便写,要让每个人都按照统一的标准来执行，我们可以利用<strong>commitlint</strong>来实现。根据<em><strong>Angular</strong></em>的提交规范会有以下几种</p></blockquote><table><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>build</td><td>编译相关的修改，例如发布版本、对项目构建或者依赖的改动</td></tr><tr><td>chore</td><td>其他修改, 比如改变构建流程、或者增加依赖库、工具等</td></tr><tr><td>ci</td><td>持续集成修改</td></tr><tr><td>docs</td><td>文档修改</td></tr><tr><td>feat</td><td>新特性、新功能</td></tr><tr><td>fix</td><td>修改bug</td></tr><tr><td>perf</td><td>优化相关，比如提升性能、体验</td></tr><tr><td>refactor</td><td>代码重构</td></tr><tr><td>revert</td><td>回滚到上一个版本</td></tr><tr><td>style</td><td>代码格式修改, 注意不是 css 修改</td></tr><tr><td>test</td><td>测试用例修改</td></tr></tbody></table><h3 id="安装-commitlint"><a href="#安装-commitlint" class="headerlink" title="安装  commitlint"></a>安装  commitlint</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pnpm add @commitlint/config-conventional @commitlint/cli -D<br></code></pre></td></tr></table></figure><h3 id="根目录-新建-commitlint-config-cjs"><a href="#根目录-新建-commitlint-config-cjs" class="headerlink" title="根目录 新建 commitlint.config.cjs"></a>根目录 新建 commitlint.config.cjs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span>],<br>  <span class="hljs-comment">// 校验规则</span><br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&#x27;type-enum&#x27;</span>: [<br>      <span class="hljs-number">2</span>,<br>      <span class="hljs-string">&#x27;always&#x27;</span>,<br>      [<br>        <span class="hljs-string">&#x27;feat&#x27;</span>,<br>        <span class="hljs-string">&#x27;fix&#x27;</span>,<br>        <span class="hljs-string">&#x27;docs&#x27;</span>,<br>        <span class="hljs-string">&#x27;style&#x27;</span>,<br>        <span class="hljs-string">&#x27;refactor&#x27;</span>,<br>        <span class="hljs-string">&#x27;perf&#x27;</span>,<br>        <span class="hljs-string">&#x27;test&#x27;</span>,<br>        <span class="hljs-string">&#x27;chore&#x27;</span>,<br>        <span class="hljs-string">&#x27;revert&#x27;</span>,<br>        <span class="hljs-string">&#x27;build&#x27;</span>,<br>      ],<br>    ],<br>    <span class="hljs-string">&#x27;type-case&#x27;</span>: [<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&#x27;type-empty&#x27;</span>: [<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&#x27;scope-empty&#x27;</span>: [<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&#x27;scope-case&#x27;</span>: [<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&#x27;subject-full-stop&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>    <span class="hljs-string">&#x27;subject-case&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>    <span class="hljs-string">&#x27;header-max-length&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;always&#x27;</span>, <span class="hljs-number">72</span>],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在package-json中配置scripts命令"><a href="#在package-json中配置scripts命令" class="headerlink" title="在package.json中配置scripts命令"></a>在<code>package.json</code>中配置scripts命令</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 在scrips中添加下面的代码</span><br>&#123;<br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;commitlint&quot;</span>: <span class="hljs-string">&quot;commitlint --config commitlint.config.cjs -e -V&quot;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="给-husky新增commit-msg钩子指令"><a href="#给-husky新增commit-msg钩子指令" class="headerlink" title="给 husky新增commit-msg钩子指令"></a>给 husky新增commit-msg钩子指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx husky add .husky/commit-msg <br><br><span class="hljs-comment"># 在生成的commit-msg文件中添加下面的命令(路径在.husky/)</span><br><br><span class="hljs-comment">#!/usr/bin/env sh</span><br>. <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname -- <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span><br>pnpm commitlint<br></code></pre></td></tr></table></figure><blockquote><p>当我们git commit -m 时需要指定上面提到的前缀才能正常commit ，feat后面的冒号要英文的 :</p><p>git commit -m “feat: 新增commitlint规范Commit记录”</p></blockquote><h2 id="配置环境变量配置"><a href="#配置环境变量配置" class="headerlink" title="配置环境变量配置"></a>配置环境变量配置</h2><blockquote><ol><li><strong>安全性：</strong> 将敏感信息（如 API 密钥、数据库密码等）存储在环境变量中比直接硬编码在代码中更安全。这样做可以避免将这些敏感信息泄露到版本控制系统中，降低了信息泄露的风险。</li><li><strong>灵活性：</strong> 使用环境变量可以使你的应用程序在不同的环境中（例如开发、测试、生产）运行时具有不同的配置。你可以针对不同的环境设置不同的环境变量，而不需要修改代码。</li><li><strong>可维护性：</strong> 将配置信息放在环境变量中可以使代码更易于维护。如果需要更改配置，只需更改环境变量的值，而不需要修改代码并重新部署应用程序。</li><li><strong>可移植性：</strong> 使用环境变量可以使你的应用程序更具可移植性。你可以在不同的环境中轻松地部署应用程序，而无需担心配置信息的硬编码问题。</li></ol><p>综上所述，配置环境变量是一种良好的实践，可以提高应用程序的安全性、灵活性、可维护性和可移植性。</p></blockquote><h3 id="根目录新建开发、测试、生产环境配置文件"><a href="#根目录新建开发、测试、生产环境配置文件" class="headerlink" title="根目录新建开发、测试、生产环境配置文件"></a>根目录新建开发、测试、生产环境配置文件</h3><blockquote><p>下面命令执行不了可以直接根目录新建文件.env.development这种方式</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">touch .env.development<br>touch .env.production<br>touch .env.test <br></code></pre></td></tr></table></figure><h3 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h3><h4 id="开发环境模板"><a href="#开发环境模板" class="headerlink" title="开发环境模板"></a>开发环境模板</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs env">NODE_ENV = &#x27;development&#x27;<br># 项目名称<br>VITE_APP_TITLE = &#x27;Vue 3 + Vite + TSX&#x27;<br># 请求根路径<br>VITE_APP_BASE_API = &#x27;/dev-api&#x27;<br># 请求地址<br>VITE_APP_BASE_URL = &#x27;http://localhost:3000&#x27;<br></code></pre></td></tr></table></figure><h4 id="生产环境模板"><a href="#生产环境模板" class="headerlink" title="生产环境模板"></a>生产环境模板</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span> = <span class="hljs-string">&#x27;production&#x27;</span><br><span class="hljs-comment"># 项目名称</span><br><span class="hljs-attr">VITE_APP_TITLE</span> = <span class="hljs-string">&#x27;Vue 3 + Vite + TSX&#x27;</span><br><span class="hljs-comment"># 请求根路径</span><br><span class="hljs-attr">VITE_APP_BASE_API</span> = <span class="hljs-string">&#x27;/prod-api&#x27;</span><br><span class="hljs-comment"># 请求地址</span><br><span class="hljs-attr">VITE_APP_BASE_URL</span> = <span class="hljs-string">&#x27;http://junsen.online:3000&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="测试环境模板"><a href="#测试环境模板" class="headerlink" title="测试环境模板"></a>测试环境模板</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 变量必须以 VITE_ 为前缀才能暴露给外部读取</span><br><span class="hljs-attr">NODE_ENV</span> = <span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-comment"># 项目名称</span><br><span class="hljs-attr">VITE_APP_TITLE</span> = <span class="hljs-string">&#x27;Vue 3 + Vite + TSX&#x27;</span><br><span class="hljs-comment"># 请求根路径</span><br><span class="hljs-attr">VITE_APP_BASE_API</span> = <span class="hljs-string">&#x27;/test-api&#x27;</span><br><span class="hljs-comment"># 请求地址</span><br><span class="hljs-attr">VITE_APP_BASE_URL</span> = <span class="hljs-string">&#x27;http://junsen.online:7001&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="启动时设置环境变量"><a href="#启动时设置环境变量" class="headerlink" title="启动时设置环境变量"></a>启动时设置环境变量</h4><blockquote><p>package.json scripts里面新增以下两条命令</p></blockquote><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&quot;<span class="hljs-keyword">build</span>:test<span class="hljs-string">&quot;: &quot;</span>vue-tsc &amp;&amp; vite <span class="hljs-keyword">build</span> --mode test<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span><span class="hljs-keyword">build</span>:pro<span class="hljs-string">&quot;: &quot;</span>vue-tsc &amp;&amp; vite <span class="hljs-keyword">build</span> --mode production<span class="hljs-string">&quot;,</span><br></code></pre></td></tr></table></figure><h4 id="给import-meta-env-添加变量提示"><a href="#给import-meta-env-添加变量提示" class="headerlink" title="给import.meta.env 添加变量提示"></a>给import.meta.env 添加变量提示</h4><blockquote><p>项目src目录下新增env.d.ts</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportMetaEnv</span> &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">VITE_APP_TITLE</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-comment">// 更多环境变量...</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportMeta</span> &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">env</span>: <span class="hljs-title class_">ImportMetaEnv</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://tuchuang.junsen.online/i/2024/02/21/24ycux-2.png" alt="image-20240221012925698"></p><h2 id="新增路径别名"><a href="#新增路径别名" class="headerlink" title="新增路径别名"></a>新增路径别名</h2><h3 id="在vite-config-ts中新增以下配置"><a href="#在vite-config-ts中新增以下配置" class="headerlink" title="在vite.config.ts中新增以下配置"></a>在vite.config.ts中新增以下配置</h3><blockquote><p>引入path冒红需要安装node头文件因为ts识别不出，执行pnpm add @types&#x2F;node</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src&#x27;</span>),<br>    &#125;,<br>  &#125;,<br></code></pre></td></tr></table></figure><p><img src="https://tuchuang.junsen.online/i/2024/02/21/2eo2iz-2.png" alt="image-20240221014556916"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>为什么不适用 prettier格式化？</p><ul><li>引用 antfu 的原话：如果你需要使用 ESLint，它也可以像 Prettier 一样格式化代码 - 而且更加可配置、Prettier + ESLint 仍然需要大量的配置 - 它并没有让你的生活变得更简单</li></ul><p>为什么要如此配置？</p><ul><li>可以规范化项目。从代码格式到校验、以及提交规范，开发环境区分，可以解决大部分因为规范引起代码混乱，不便于code review，</li><li>加上在ts的加持下，提供了静态类型检查的功能，可以在编译时捕获类型错误，避免在运行时出现类型相关的错误。这可以提高代码的可靠性和可维护性以及强大的代码提示和自动完成功能，可以帮助开发人员更快地编写代码、发现 API 和库的用法，并减少错误。</li></ul><p>还会有后续文章吗？</p><ul><li>会有的，后续的规划是复习node、webpack、vite等内容，从构建工具底层原理入手。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023年前端开发年度总结</title>
    <link href="/2024/02/06/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2024/02/06/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>回顾这一年，我从大二兼职开发者到大三“全职开发”，见证了公司从成立初期到如今的发展。在2021年末，通过院长引荐，我参与了五邑大学某项目，与团队共同启动了长达一年的开发时限。公司于2022年后成立，我以兼职身份开始参与项目开发，在校期间，除了项目开发，我还投入双专业学习和各类竞赛，虽然部分技术提升有限，但微乎其微。</p><h2 id="2-技术成长"><a href="#2-技术成长" class="headerlink" title="2. 技术成长"></a>2. 技术成长</h2><h3 id="2-1-学习经历"><a href="#2-1-学习经历" class="headerlink" title="2.1 学习经历"></a>2.1 学习经历</h3><p>在2023年，我有幸参与了多个业务项目和百万用户的公益项目——诚信点评小程序。这一年，我不仅扩展了横向技能树，还转变为多领域开发者，涉及cocos游戏开发、自动化脚本开发、web3d开发等。在项目实际需求中，我深入学习了webgl、websocket、typescript、vue3、项目基建、git规范、cocos3d、UiAutomation、AiBote、vite、glsl、electorn、nestjs等技术，为公司业务的多样性提供了更广泛的支持。</p><h2 id="3-团队角色"><a href="#3-团队角色" class="headerlink" title="3. 团队角色"></a>3. 团队角色</h2><p>我在公司内部担任部分前端项目负责人，并担任新人培养导师。在工作期间，我主导了四个项目的基建与核心功能开发，取得了显著的团队成绩。</p><h2 id="4-发展计划"><a href="#4-发展计划" class="headerlink" title="4. 发展计划"></a>4. 发展计划</h2><p>展望未来，我期望在接下来的一年中能够主导更多基础建设项目，学习头部互联网企业所需的前沿技术，涉及更多底层原理，实现技术的深度和广度的双重提升。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>2023年不仅是对这一年的总结，更是对过去三年的总结与吐槽。公司提供了平台，但同时也限制了个人的提升。在项目中涉猎各个方向，虽然见识了更多领域，但也面临难以专精某一项的挑战。未来，我将继续努力，寻找平衡点，实现专业技能的全面提升。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>threejs轨道控制器辅助器</title>
    <link href="/2024/01/10/threejs%E8%BD%A8%E9%81%93%E6%8E%A7%E5%88%B6%E5%99%A8%E8%BE%85%E5%8A%A9%E5%99%A8/"/>
    <url>/2024/01/10/threejs%E8%BD%A8%E9%81%93%E6%8E%A7%E5%88%B6%E5%99%A8%E8%BE%85%E5%8A%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="threejs轨道控制器辅助器"><a href="#threejs轨道控制器辅助器" class="headerlink" title="threejs轨道控制器辅助器"></a>threejs轨道控制器辅助器</h1><blockquote><p>OrbitControlsHelper 由来，由于项目需要threejs默认的轨道控制器无法以模型为中心上下左右旋转，而是以修改相机视角达到视角旋转的效果当通过鼠标右键移动控制器后，相机的旋转会以世界中心旋转。</p><p>OrbitControlsHelper 可以把旋转中心从世界中心坐标改为模型中心旋转，可以参考下面的代码去理解。最后的是抽取成辅助类形式去调用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div ref=&quot;container&quot;&gt;<br>    &lt;!-- &lt;canvas ref=&quot;canvas&quot;&gt;&lt;/canvas&gt; --&gt;<br>    &lt;button @click=&quot;test(&#x27;0°&#x27;)&quot;&gt;回正&lt;/button&gt;<br>    &lt;button @click=&quot;test(&#x27;R45°&#x27;)&quot;&gt;R45°&lt;/button&gt;<br>    &lt;button @click=&quot;test(&#x27;L45°&#x27;)&quot;&gt;L45°&lt;/button&gt;<br>    &lt;button @click=&quot;test(&#x27;R90°&#x27;)&quot;&gt;R90°&lt;/button&gt;<br>    &lt;button @click=&quot;test(&#x27;L90°&#x27;)&quot;&gt;L90°&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;<br>import * as THREE from &#x27;three&#x27;;<br>import &#123; OrbitControls &#125; from &#x27;three/addons/controls/OrbitControls.js&#x27;;<br><br>const container = ref();<br>let camera: any;<br>let controls: any;<br>let cube: any;<br>const init = () =&gt; &#123;<br>  // 初始化场景<br>  const scene = new THREE.Scene();<br>  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);<br>  const renderer = new THREE.WebGLRenderer();<br>  camera.position.z = 5;<br>  renderer.setSize(window.innerWidth, window.innerHeight);<br>  container.value.appendChild(renderer.domElement);<br><br>  controls = new OrbitControls(camera, renderer.domElement);<br>  controls.enableRotate = false;<br>  controls.enableZoom = false;<br>  // 如果OrbitControls改变了相机参数，重新调用渲染器渲染三维场景<br>  controls.addEventListener(&#x27;change&#x27;, function () &#123;<br>    renderer.render(scene, camera); // 执行渲染操作<br>  &#125;); // 监听鼠标、键盘事件<br><br>  //   const gridHelper = new THREE.GridHelper(300, 25, 0x004444, 0x004444);<br><br>  //   scene.add(gridHelper);<br>  const geometry = new THREE.BoxGeometry(1, 1, 1);<br>  const material = new THREE.MeshBasicMaterial(&#123; color: 0x00ff00 &#125;);<br>  cube = new THREE.Mesh(geometry, material);<br>  scene.add(cube);<br><br>  // 初始化控制参数<br>  const state = &#123;<br>    isLongPressing: false,<br>    longPressThreshold: 100, // 长按阈值，单位为毫秒<br>    pressStartTime: 0,<br>    previousMousePosition: &#123;<br>      x: 0,<br>      y: 0,<br>    &#125;,<br>    longPressTimer: undefined, // 用于存储定时器的ID<br>  &#125;;<br><br>  // 鼠标按下事件<br>  const handleMouseDown = (event: MouseEvent) =&gt; &#123;<br>    if (event.button === 0) &#123;<br>      // 检查左键<br>      state.pressStartTime = Date.now();<br>      state.isLongPressing = false;<br>      state.previousMousePosition.x = event.clientX;<br>      state.previousMousePosition.y = event.clientY;<br>      state.longPressTimer = setTimeout(checkLongPress, state.longPressThreshold) as unknown as any;<br>    &#125;<br>  &#125;;<br><br>  // 鼠标松开事件<br>  const handleMouseUp = () =&gt; &#123;<br>    state.isLongPressing = false;<br>    clearTimeout(state.longPressTimer);<br>  &#125;;<br>  // 检查长按<br>  function checkLongPress() &#123;<br>    const currentTime = Date.now();<br>    if (currentTime - state.pressStartTime &gt;= state.longPressThreshold) &#123;<br>      // 左键长按的处理代码<br>      state.isLongPressing = true;<br>      console.log(&#x27;左键长按&#x27;);<br>    &#125;<br>  &#125;<br>  // 鼠标移动事件<br>  const handleMouseMove = (event: MouseEvent) =&gt; &#123;<br>    if (state.isLongPressing) &#123;<br>      // 在长按状态下的鼠标移动处理代码<br>      const deltaMove = &#123;<br>        x: event.pageX - state.previousMousePosition.x,<br>        y: event.pageY - state.previousMousePosition.y,<br>      &#125;;<br>      // 获取关联的 DOM 元素<br>      const element = renderer.domElement;<br>      cube.rotation.x += (2 * Math.PI * deltaMove.y) / element.clientHeight;<br>      cube.rotation.y += (2 * Math.PI * deltaMove.x) / element.clientWidth;<br>      // 更新鼠标位置<br>      state.previousMousePosition = &#123;<br>        x: event.pageX,<br>        y: event.pageY,<br>      &#125;;<br>    &#125;<br>  &#125;;<br>  // 滚轮事件<br>  const handleWheel = (event: WheelEvent) =&gt; &#123;<br>    // 根据滚轮滚动的差值进行缩放<br>    const scaleFactor = event.deltaY &gt; 0 ? 0.9 : 1.1;<br>    cube.scale.multiplyScalar(scaleFactor);<br>  &#125;;<br><br>  // 渲染循环<br>  const animate = () =&gt; &#123;<br>    requestAnimationFrame(animate);<br>    renderer.render(scene, camera);<br>  &#125;;<br><br>  // 初始化相机位置<br>  camera.position.z = 5;<br><br>  // 启动渲染循环<br>  animate();<br><br>  document.addEventListener(&#x27;mousedown&#x27;, handleMouseDown);<br>  document.addEventListener(&#x27;mouseup&#x27;, handleMouseUp);<br>  document.addEventListener(&#x27;mousemove&#x27;, handleMouseMove);<br>  document.addEventListener(&#x27;wheel&#x27;, handleWheel);<br>&#125;;<br><br>const test = (degToRad: string) =&gt; &#123;<br>  console.log(controls);<br><br>  switch (degToRad) &#123;<br>    // 0°旋转的情况<br>    case &#x27;0°&#x27;:<br>      // 设置左右两个相机的旋转<br>      cube.rotation.set(0, THREE.MathUtils.degToRad(0), 0);<br>      break;<br><br>    // +45°旋转的情况<br>    case &#x27;R45°&#x27;:<br>      cube.rotation.set(0, THREE.MathUtils.degToRad(45), 0);<br>      break;<br><br>    // -45°旋转的情况<br>    case &#x27;L45°&#x27;:<br>      cube.rotation.set(0, -THREE.MathUtils.degToRad(45), 0);<br>      break;<br><br>    // +90°旋转的情况<br>    case &#x27;R90°&#x27;:<br>      cube.rotation.set(0, THREE.MathUtils.degToRad(90), 0);<br>      break;<br><br>    // -90°旋转的情况<br>    case &#x27;L90°&#x27;:<br>      cube.rotation.set(0, -THREE.MathUtils.degToRad(90), 0);<br>      break;<br>  &#125;<br>  // 设置轨道控制器的目标点（target）为初始位置<br>  controls.target.set(0, 0, 0);<br><br>  // 设置相机的位置为默认位置<br>  camera.position.set(0, 0, 5); // 你可能需要根据实际情况调整 Z 轴的值<br><br>  // 使相机重新对准目标点<br>  controls.update();<br><br>  console.log(controls);<br>&#125;;<br><br>// 注册事件监听器<br>onMounted(() =&gt; &#123;<br>  init();<br>&#125;);<br>&lt;/script&gt;<br><br><br></code></pre></td></tr></table></figure><h2 id="抽取后的代码"><a href="#抽取后的代码" class="headerlink" title="抽取后的代码"></a>抽取后的代码</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// eslint-disable-next-line filename-rules/match</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrbitControlsHelper</span> &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-built_in">any</span> = &#123;<br>    <span class="hljs-comment">// 是否正在长按的状态，初始值为 false</span><br>    <span class="hljs-attr">isLongPressing</span>: <span class="hljs-literal">false</span>,<br><br>    <span class="hljs-comment">// 长按的阈值，单位为毫秒，如果按下的时间超过这个阈值，则认为是长按</span><br>    <span class="hljs-attr">longPressThreshold</span>: <span class="hljs-number">100</span>,<br><br>    <span class="hljs-comment">// 记录按下鼠标的时间，用于计算是否长按</span><br>    <span class="hljs-attr">pressStartTime</span>: <span class="hljs-number">0</span>,<br><br>    <span class="hljs-comment">// 记录上一次鼠标的位置，用于计算鼠标移动的距离</span><br>    <span class="hljs-attr">previousMousePosition</span>: &#123;<br>      <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>    &#125;,<br><br>    <span class="hljs-comment">// 用于存储定时器的 ID，定时器用于检查是否长按</span><br>    <span class="hljs-attr">longPressTimer</span>: <span class="hljs-literal">undefined</span>,<br><br>    <span class="hljs-comment">// 存储双指触摸开始时的距离，用于计算缩放比例</span><br>    <span class="hljs-attr">touchStartDistance</span>: <span class="hljs-number">0</span>,<br><br>    <span class="hljs-comment">// 存储触摸缩放因子，用于在触摸移动时计算新的缩放比例</span><br>    <span class="hljs-title class_">ScaleFactor</span>: [-<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>    <span class="hljs-title class_">Rotation</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>  &#125;;<br><br>  <span class="hljs-comment">// 存储 THREE.js 模型的数组，每个模型都是一个 THREE.Group 对象</span><br>  <span class="hljs-attr">models</span>: <span class="hljs-variable constant_">THREE</span>.<span class="hljs-property">Group</span>&lt;<span class="hljs-variable constant_">THREE</span>.<span class="hljs-property">Object3DEventMap</span>&gt;[] = [];<br><br>  <span class="hljs-comment">// 存储画布</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">element</span>: <span class="hljs-title class_">HTMLCanvasElement</span>;<br><br>  <span class="hljs-comment">// 构造函数，接收一个 HTMLCanvasElement 参数，为其添加事件监听器</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> el: HTMLCanvasElement</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = el!;<br>    <span class="hljs-comment">// 添加鼠标按下事件监听器，用于处理鼠标按下事件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseDown</span>);<br><br>    <span class="hljs-comment">// 添加鼠标抬起事件监听器，用于处理鼠标抬起事件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseUp</span>);<br><br>    <span class="hljs-comment">// 添加鼠标移动事件监听器，用于处理鼠标移动事件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseMove</span>);<br><br>    <span class="hljs-comment">// 添加滚轮滚动事件监听器，用于处理滚轮滚动事件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;wheel&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleWheel</span>);<br><br>    <span class="hljs-comment">// 添加触摸开始事件监听器，用于处理触摸开始事件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleTouchStart</span>, &#123; <span class="hljs-attr">passive</span>: <span class="hljs-literal">false</span> &#125;);<br><br>    <span class="hljs-comment">// 添加触摸结束事件监听器，用于处理触摸结束事件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchend&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleTouchEnd</span>);<br><br>    <span class="hljs-comment">// 添加触摸移动事件监听器，用于处理触摸移动事件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleTouchMove</span>, &#123; <span class="hljs-attr">passive</span>: <span class="hljs-literal">false</span> &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// 检查是否长按的方法</span><br>  checkLongPress = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取当前时间</span><br>    <span class="hljs-keyword">const</span> currentTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><br>    <span class="hljs-comment">// 如果从按下鼠标到现在的时间超过了长按阈值，则认为是长按</span><br>    <span class="hljs-keyword">if</span> (currentTime - <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">pressStartTime</span> &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">longPressThreshold</span>) &#123;<br>      <span class="hljs-comment">// 设置长按状态为 true</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLongPressing</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 处理鼠标抬起的方法</span><br>  handleMouseUp = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 鼠标抬起时，设置长按状态为 false，并清除长按检查的定时器</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLongPressing</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">longPressTimer</span>);<br>  &#125;;<br><br>  <span class="hljs-comment">// 处理鼠标按下的方法</span><br>  handleMouseDown = <span class="hljs-function">(<span class="hljs-params">event: MouseEvent</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 只处理左键按下事件</span><br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">button</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 记录按下鼠标的时间，设置长按状态为 false，记录鼠标的位置，并设置一个定时器来检查是否长按</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">pressStartTime</span> = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLongPressing</span> = <span class="hljs-literal">false</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">previousMousePosition</span>.<span class="hljs-property">x</span> = event.<span class="hljs-property">clientX</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">previousMousePosition</span>.<span class="hljs-property">y</span> = event.<span class="hljs-property">clientY</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">longPressTimer</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">checkLongPress</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">longPressThreshold</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>;<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 处理鼠标移动的方法</span><br>  handleMouseMove = <span class="hljs-function">(<span class="hljs-params">event: MouseEvent</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 只在长按状态下处理鼠标移动事件</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLongPressing</span>) &#123;<br>      <span class="hljs-comment">// 计算鼠标移动的距离</span><br>      <span class="hljs-keyword">const</span> deltaMove = &#123;<br>        <span class="hljs-attr">x</span>: event.<span class="hljs-property">pageX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">previousMousePosition</span>.<span class="hljs-property">x</span>,<br>        <span class="hljs-attr">y</span>: event.<span class="hljs-property">pageY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">previousMousePosition</span>.<span class="hljs-property">y</span>,<br>      &#125;;<br><br>      <span class="hljs-comment">// 遍历所有模型</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">models</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">model</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (model) &#123;<br>          <span class="hljs-comment">// 计算新的旋转角度公式：新的角度 = 旧的角度 + (2π * 移动的距离 / 元素的高度或宽度)。</span><br>          <span class="hljs-comment">// 当鼠标在元素上从一端移动到另一端时，模型应该旋转 360 度（即 2π 弧度）。</span><br>          <span class="hljs-keyword">const</span> newRotationX = model.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> + (<span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * deltaMove.<span class="hljs-property">y</span>) / <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">clientHeight</span>;<br>          <span class="hljs-keyword">const</span> newRotationY = model.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> + (<span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * deltaMove.<span class="hljs-property">x</span>) / <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">clientWidth</span>;<br><br>          <span class="hljs-comment">// 将角度转换为度数公式为：度数 = 弧度 * (180 / π)。</span><br>          <span class="hljs-keyword">const</span> newRotationXInDegrees = newRotationX * (<span class="hljs-number">180</span> / <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>          <span class="hljs-keyword">const</span> newRotationYInDegrees = newRotationY * (<span class="hljs-number">180</span> / <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br><br>          <span class="hljs-comment">// 检查新的旋转角度是否在 -90 度到 90 度的范围内，如果是，则更新模型的旋转角度</span><br>          <span class="hljs-keyword">if</span> (newRotationXInDegrees &gt;= -<span class="hljs-number">90</span> &amp;&amp; newRotationXInDegrees &lt;= <span class="hljs-number">90</span>) &#123;<br>            model.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> = newRotationX;<br>          &#125;<br>          <span class="hljs-keyword">if</span> (newRotationYInDegrees &gt;= -<span class="hljs-number">90</span> &amp;&amp; newRotationYInDegrees &lt;= <span class="hljs-number">90</span>) &#123;<br>            model.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> = newRotationY;<br>          &#125;<br><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">Rotation</span> = [...model.<span class="hljs-property">rotation</span>];<br>        &#125;<br>      &#125;);<br><br>      <span class="hljs-comment">// 更新鼠标的位置，以便下次计算移动距离</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">previousMousePosition</span> = &#123;<br>        <span class="hljs-attr">x</span>: event.<span class="hljs-property">pageX</span>,<br>        <span class="hljs-attr">y</span>: event.<span class="hljs-property">pageY</span>,<br>      &#125;;<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 处理滚轮滚动的方法</span><br>  handleWheel = <span class="hljs-function">(<span class="hljs-params">event: WheelEvent</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 根据滚轮滚动的差值进行缩放，滚轮向下滚动时缩小，向上滚动时放大</span><br>    <span class="hljs-keyword">const</span> scaleFactor = event.<span class="hljs-property">deltaY</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">0.9</span> : <span class="hljs-number">1.1</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">models</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">model</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (model) &#123;<br>        <span class="hljs-comment">// 计算新的缩放值，新的缩放值 = 旧的缩放值 * 缩放因子</span><br>        <span class="hljs-keyword">const</span> newScale = model.<span class="hljs-property">scale</span>.<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">multiplyScalar</span>(scaleFactor);<br><br>        <span class="hljs-comment">// 设置缩放范围，例如，假设缩放范围在 -40 到 40 之间</span><br>        <span class="hljs-keyword">const</span> minScale = -<span class="hljs-number">60</span>;<br>        <span class="hljs-keyword">const</span> maxScale = <span class="hljs-number">60</span>;<br>        <span class="hljs-keyword">if</span> (newScale.<span class="hljs-property">x</span> &lt;= -<span class="hljs-number">2</span>) &#123;<br>          <span class="hljs-comment">// 限制缩放值在范围内</span><br>          newScale.<span class="hljs-title function_">clampScalar</span>(minScale, maxScale);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">ScaleFactor</span> = [...newScale];<br>          <span class="hljs-comment">// 应用新的缩放值</span><br>          model.<span class="hljs-property">scale</span>.<span class="hljs-title function_">copy</span>(newScale);<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// 处理触摸结束的方法</span><br>  handleTouchEnd = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 触摸结束时，调用 handleMouseUp 方法处理</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleMouseUp</span>();<br>  &#125;;<br><br>  <span class="hljs-comment">// 将触摸事件转换为鼠标事件的方法</span><br>  convertTouchEvent = (<span class="hljs-attr">event</span>: <span class="hljs-title class_">TouchEvent</span>): <span class="hljs-function"><span class="hljs-params">MouseEvent</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取第一个触摸点</span><br>    <span class="hljs-keyword">const</span> touch = event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>] || event.<span class="hljs-property">changedTouches</span>[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-comment">// 创建一个新的鼠标事件，并设置其 clientX 和 clientY 为触摸点的位置</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseEvent</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, &#123;<br>      <span class="hljs-attr">clientX</span>: touch.<span class="hljs-property">clientX</span>,<br>      <span class="hljs-attr">clientY</span>: touch.<span class="hljs-property">clientY</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// 处理触摸开始的方法</span><br>  handleTouchStart = <span class="hljs-function">(<span class="hljs-params">event: TouchEvent</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 阻止默认行为</span><br>    event.<span class="hljs-title function_">preventDefault</span>();<br><br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">touches</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 单指触摸时，调用 handleMouseDown 方法处理，并将触摸事件转换为鼠标事件</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleMouseDown</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">convertTouchEvent</span>(event));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">touches</span>.<span class="hljs-property">length</span> === <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-comment">// 双指触摸时，计算两个触摸点之间的距离</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">touchStartDistance</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getTouchesDistance</span>(event.<span class="hljs-property">touches</span>);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 处理触摸移动的方法</span><br>  handleTouchMove = <span class="hljs-function">(<span class="hljs-params">event: TouchEvent</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 阻止默认行为</span><br>    event.<span class="hljs-title function_">preventDefault</span>();<br><br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">touches</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 单指移动时，调用 handleMouseMove 方法处理，并将触摸事件转换为鼠标事件</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleMouseMove</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">convertTouchEvent</span>(event));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">touches</span>.<span class="hljs-property">length</span> === <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-comment">// 双指移动时，计算两个触摸点之间的新距离</span><br>      <span class="hljs-keyword">const</span> newDistance = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getTouchesDistance</span>(event.<span class="hljs-property">touches</span>);<br><br>      <span class="hljs-comment">// 设置一个阈值，例如10个像素，以确定是否进行了显著的缩放操作</span><br>      <span class="hljs-keyword">const</span> threshold = <span class="hljs-number">10</span>;<br>      <span class="hljs-keyword">const</span> distanceChange = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(newDistance - <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">touchStartDistance</span>);<br><br>      <span class="hljs-keyword">if</span> (distanceChange &gt; threshold) &#123;<br>        <span class="hljs-comment">// 只有当距离变化超过阈值时，才进行缩放。如果新距离大于起始距离，放大模型，否则缩小模型</span><br>        <span class="hljs-keyword">const</span> scaleFactor = newDistance &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">touchStartDistance</span> ? <span class="hljs-number">1.1</span> : <span class="hljs-number">0.9</span>;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">models</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">model</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (model) &#123;<br>            <span class="hljs-comment">// 计算新的缩放值，新的缩放值 = 旧的缩放值 * 缩放因子</span><br>            <span class="hljs-keyword">const</span> newScale = model.<span class="hljs-property">scale</span>.<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">multiplyScalar</span>(scaleFactor);<br>            <span class="hljs-keyword">const</span> minScale = -<span class="hljs-number">60</span>;<br>            <span class="hljs-keyword">const</span> maxScale = <span class="hljs-number">60</span>;<br><br>            <span class="hljs-keyword">if</span> (newScale.<span class="hljs-property">x</span> &lt;= -<span class="hljs-number">2</span>) &#123;<br>              <span class="hljs-comment">// 限制缩放值在范围内</span><br>              newScale.<span class="hljs-title function_">clampScalar</span>(minScale, maxScale);<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">ScaleFactor</span> = [...newScale];<br>              <span class="hljs-comment">// 应用新的缩放值</span><br>              model.<span class="hljs-property">scale</span>.<span class="hljs-title function_">copy</span>(newScale);<br>            &#125;<br>          &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 更新起始距离，以便下次计算距离变化</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">touchStartDistance</span> = newDistance;<br>      &#125;<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 计算两个触摸点之间的距离的方法</span><br>  getTouchesDistance = <span class="hljs-function">(<span class="hljs-params">touches: TouchList</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 计算两个触摸点在 x 轴和 y 轴上的差值</span><br>    <span class="hljs-keyword">const</span> dx = touches[<span class="hljs-number">0</span>].<span class="hljs-property">pageX</span> - touches[<span class="hljs-number">1</span>].<span class="hljs-property">clientX</span>;<br>    <span class="hljs-keyword">const</span> dy = touches[<span class="hljs-number">0</span>].<span class="hljs-property">pageY</span> - touches[<span class="hljs-number">1</span>].<span class="hljs-property">clientY</span>;<br><br>    <span class="hljs-comment">// 使用勾股定理计算两个触摸点之间的距离</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(dx * dx + dy * dy);<br>  &#125;;<br><br>  <span class="hljs-comment">// 加载模型的方法</span><br>  loadModels = <span class="hljs-function">(<span class="hljs-params">models: THREE.Group&lt;THREE.Object3DEventMap&gt;[]</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 将传入的模型赋值给 this.models</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">models</span> = models;<br>  &#125;;<br><br>  <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseDown</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseUp</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseMove</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;wheel&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleWheel</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleTouchStart</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;touchend&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleTouchEnd</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleTouchMove</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 计算缩放比</span><br>  <span class="hljs-title function_">calculateScalingRatio</span>(<span class="hljs-params">aspectRatio</span>) &#123;<br>    <span class="hljs-comment">// 初始化缩放比</span><br>    <span class="hljs-comment">// 计算新的缩放比例</span><br>    <span class="hljs-comment">// const aspectRatio = sceneWidth / sceneHeight;</span><br>    <span class="hljs-keyword">let</span> scaleRatio = aspectRatio / <span class="hljs-number">0.5</span>; <span class="hljs-comment">// 计算缩放比例</span><br>    scaleRatio = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(scaleRatio, <span class="hljs-number">1</span>); <span class="hljs-comment">// 限制缩放比例的最大值为1，确保模型不会变得过大</span><br>    <span class="hljs-keyword">const</span> scale = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(-<span class="hljs-number">8</span> * scaleRatio); <span class="hljs-comment">// 取绝对值，确保缩放比例始终为正值</span><br>    <span class="hljs-comment">// 更新模型的缩放比例</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">ScaleFactor</span> = [-scale, scale, scale];<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">orbitControlsHelper</span>: <span class="hljs-built_in">any</span>;<br><br># 创建轨道控制器辅助器<br>orbitControlsHelper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrbitControlsHelper</span>(renderer.<span class="hljs-property">value</span>.<span class="hljs-property">domElement</span>);<br>orbitControlsHelper.<span class="hljs-title function_">calculateScalingRatio</span>(cameraLeft.<span class="hljs-property">aspect</span>);<br># 禁用 轨道控制器缩放和平移旋转事件<br>controls.<span class="hljs-property">enableRotate</span> = <span class="hljs-literal">false</span>;<br>controls.<span class="hljs-property">enableZoom</span> = <span class="hljs-literal">false</span>;<br><br># 订阅鼠标按键事件<br>renderer.<span class="hljs-property">value</span>.<span class="hljs-property">domElement</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>, orbitControlsHelper.<span class="hljs-property">handleMouseDown</span>);<br>renderer.<span class="hljs-property">value</span>.<span class="hljs-property">domElement</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, orbitControlsHelper.<span class="hljs-property">handleMouseUp</span>);<br>renderer.<span class="hljs-property">value</span>.<span class="hljs-property">domElement</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, orbitControlsHelper.<span class="hljs-property">handleMouseMove</span>);<br>renderer.<span class="hljs-property">value</span>.<span class="hljs-property">domElement</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;wheel&#x27;</span>, orbitControlsHelper.<span class="hljs-property">handleWheel</span>);<br><br>#在执行动画渲染的函数加载需要修改的模型<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行动画渲染的函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">animate</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">requestAnimationFrame</span>(animate);<br>  # 加载模型<br>  orbitControlsHelper.<span class="hljs-title function_">loadModels</span>([<span class="hljs-title class_">FaceModelOne</span>, <span class="hljs-title class_">FaceModelTwo</span>, <span class="hljs-title class_">HistoryFaceModel</span>]);<br>  <span class="hljs-comment">// 渲染左眼场景</span><br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">setViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width.<span class="hljs-property">value</span>, height.<span class="hljs-property">value</span>);<br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">setScissor</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width.<span class="hljs-property">value</span>, height.<span class="hljs-property">value</span>);<br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">setScissorTest</span>(<span class="hljs-literal">true</span>);<br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">render</span>(sceneLeft, cameraLeft.<span class="hljs-property">value</span>);<br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">setPixelRatio</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">devicePixelRatio</span>);<br><br>  <span class="hljs-comment">// 渲染右眼场景</span><br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">setViewport</span>(width.<span class="hljs-property">value</span>, <span class="hljs-number">0</span>, width.<span class="hljs-property">value</span>, height.<span class="hljs-property">value</span>);<br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">setScissor</span>(width.<span class="hljs-property">value</span>, <span class="hljs-number">0</span>, width.<span class="hljs-property">value</span>, height.<span class="hljs-property">value</span>);<br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">setScissorTest</span>(<span class="hljs-literal">true</span>);<br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">render</span>(sceneRight, cameraRight.<span class="hljs-property">value</span>);<br>  renderer.<span class="hljs-property">value</span>.<span class="hljs-title function_">setPixelRatio</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">devicePixelRatio</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>threejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web3d</tag>
      
      <tag>threejs</tag>
      
      <tag>webgl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3-ts-vite集成electron记录</title>
    <link href="/2023/11/26/vue3-ts-vite%E9%9B%86%E6%88%90electron%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/26/vue3-ts-vite%E9%9B%86%E6%88%90electron%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="vue3-ts-vite集成electron记录"><a href="#vue3-ts-vite集成electron记录" class="headerlink" title="vue3-ts-vite集成electron记录"></a>vue3-ts-vite集成electron记录</h1><h2 id="安装electron、electron-builder"><a href="#安装electron、electron-builder" class="headerlink" title="安装electron、electron-builder"></a>安装electron、electron-builder</h2><blockquote><p>npm install –save-dev electron electron-builder</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>项目目录结构</p><p>│  .cz-config.js<br>│  .env<br>│  .env.development<br>│  .env.production<br>│  .eslintrc.cjs<br>│  .gitignore<br>│  .npmrc<br>│  .prettierrc.json<br>│  catalogTree.txt<br>│  commitlint.config.cjs<br>│  env.d.ts<br>│  index.html<br>│  package.json<br>│  pnpm-lock.yaml<br>│  README.md<br>│  tsconfig.app.json<br>│  tsconfig.json<br>│  tsconfig.node.json<br>│  uno.config.ts<br>│  vite.config.ts<br>│<br>├─.husky<br>│      commit-msg<br>│      pre-commit<br>│<br>├─.vscode<br>│      extensions.json<br>│<br>├─electron<br>│  │  background.ts<br>│  │<br>│  ├─plugins<br>│  │      vite-electron-build.ts<br>│  │      vite-electron-dev.ts<br>│  │<br>│  ├─preload<br>│  │      index.ts<br>│  │<br>│  └─utils<br>│          build.ts<br>│          handle-files.ts<br>│<br>├─public<br>│      favicon.ico<br>│<br>└─src<br>    │  App.vue<br>    │  env.d.ts<br>    │  global.d.ts<br>    │  main.ts<br>    │<br>    ├─assets<br>    │      base.css<br>    │      logo.svg<br>    │      main.css<br>    │<br>    ├─request<br>    │      index.ts<br>    │<br>    ├─router<br>    │      index.ts<br>    │<br>    ├─stores<br>    │      counter.ts<br>    │<br>    ├─utils<br>    │      indexed-db.ts<br>    │<br>    └─views<br>            ThreeDemo.vue</p></blockquote><h3 id="根目录新建electron文件夹"><a href="#根目录新建electron文件夹" class="headerlink" title="根目录新建electron文件夹"></a>根目录新建electron文件夹</h3><blockquote><p>安装我的项目结构在根目录新建electron文件夹以及文件夹内的所有文件夹与文件</p></blockquote><ul><li><p>background.ts 等同于electron文档中介绍的 main.js，因为项目已经存在main.ts，命名冲突</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> electron 主进程文件，因为项目已经有同名的main.ts了，所以使用background.ts</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">import</span> &#123; app, <span class="hljs-title class_">BrowserWindow</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;electron&#x27;</span><br><br><span class="hljs-comment">// 禁用electron缓存</span><br>app.<span class="hljs-property">commandLine</span>.<span class="hljs-title function_">appendSwitch</span>(<span class="hljs-string">&#x27;disable-gpu-cache&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createWindow</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> win = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,<br>        <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>,<br>        <span class="hljs-attr">autoHideMenuBar</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">webPreferences</span>: &#123;<br>            <span class="hljs-attr">preload</span>: process.<span class="hljs-property">argv</span>[<span class="hljs-number">2</span>]<br>                ? path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;../preload/index.ts&#x27;</span>)<br>                : path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;preload/index.js&#x27;</span>),<br>            <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 禁用 Node.js 整合</span><br>            <span class="hljs-attr">contextIsolation</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用上下文隔离</span><br>            <span class="hljs-attr">sandbox</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用沙盒模式</span><br>            <span class="hljs-attr">webSecurity</span>: <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;)<br><br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">argv</span>[<span class="hljs-number">2</span>]) &#123;<br>        win.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">openDevTools</span>()<br>        win.<span class="hljs-title function_">loadURL</span>(process.<span class="hljs-property">argv</span>[<span class="hljs-number">2</span>])<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        win.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>    &#125;<br>&#125;<br><br>app.<span class="hljs-title function_">whenReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">createWindow</span>()<br>    app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">BrowserWindow</span>.<span class="hljs-title function_">getAllWindows</span>().<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-title function_">createWindow</span>()<br>        &#125;<br>    &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">platform</span> !== <span class="hljs-string">&#x27;darwin&#x27;</span>) &#123;<br>        app.<span class="hljs-title function_">quit</span>()<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure></li><li><p>utils里面的build.ts、handle-files.ts，分别处理electron文件的热更新、与项目的dist打包文件同步</p><ul><li>utils&#x2F;build.ts</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">buildBackground</span> = (<span class="hljs-params">entryPoints: <span class="hljs-built_in">string</span>, outfile: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>    <span class="hljs-comment">// entryPoints: [&#x27;electron/background.ts&#x27;],</span><br>    <span class="hljs-comment">// outfile: &#x27;electron/dist/background.js&#x27;,</span><br><br>    <span class="hljs-comment">// eslint-disable-next-line @typescript-eslint/no-var-requires</span><br>    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;esbuild&#x27;</span>).<span class="hljs-title function_">buildSync</span>(&#123;<br>        <span class="hljs-attr">entryPoints</span>: [entryPoints],<br>        <span class="hljs-attr">bundle</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;es2020&#x27;</span>,<br>        outfile,<br>        <span class="hljs-attr">platform</span>: <span class="hljs-string">&#x27;node&#x27;</span>,<br>        <span class="hljs-attr">external</span>: [<span class="hljs-string">&#x27;electron&#x27;</span>]<br>    &#125;)<br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li><p>electron&#x2F;utils&#x2F;handle-files.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><br><span class="hljs-comment">// 使用 fs 模块进行清空目标目录</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">emptyDirectorySync</span>(<span class="hljs-params">directory: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-keyword">if</span> (fs.<span class="hljs-title function_">existsSync</span>(directory)) &#123;<br>        <span class="hljs-keyword">const</span> files = fs.<span class="hljs-title function_">readdirSync</span>(directory)<br><br>        files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> filePath = path.<span class="hljs-title function_">join</span>(directory, file)<br><br>            <span class="hljs-keyword">if</span> (fs.<span class="hljs-title function_">lstatSync</span>(filePath).<span class="hljs-title function_">isDirectory</span>()) &#123;<br>                <span class="hljs-title function_">emptyDirectorySync</span>(filePath)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fs.<span class="hljs-title function_">unlinkSync</span>(filePath)<br>            &#125;<br>        &#125;)<br><br>        fs.<span class="hljs-title function_">rmdirSync</span>(directory)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用 fs 模块进行复制</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">copyFolderSync</span>(<span class="hljs-params">source: <span class="hljs-built_in">string</span>, target: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!fs.<span class="hljs-title function_">existsSync</span>(target)) &#123;<br>        fs.<span class="hljs-title function_">mkdirSync</span>(target)<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> files = fs.<span class="hljs-title function_">readdirSync</span>(source)<br><br>    files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> sourceFilePath = path.<span class="hljs-title function_">join</span>(source, file)<br>        <span class="hljs-keyword">const</span> targetFilePath = path.<span class="hljs-title function_">join</span>(target, file)<br><br>        <span class="hljs-keyword">if</span> (fs.<span class="hljs-title function_">lstatSync</span>(sourceFilePath).<span class="hljs-title function_">isDirectory</span>()) &#123;<br>            <span class="hljs-title function_">copyFolderSync</span>(sourceFilePath, targetFilePath)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            fs.<span class="hljs-title function_">copyFileSync</span>(sourceFilePath, targetFilePath)<br>        &#125;<br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>preload是electron的预加载文件，例如IPC通信、vue与electron通信桥梁都可以在这里面定义，以下是electron官网的介绍</p><blockquote><p>什么是预加载脚本，并且学会如何使用预加载脚本来安全地将特权 API 暴露至渲染进程中。 不仅如此，你还会学到如何使用 Electron 的进程间通信 (IPC) 模组来让主进程与渲染进程间进行通信。</p><p>Electron 的主进程是一个拥有着完全操作系统访问权限的 Node.js 环境。 除了 <a href="https://www.electronjs.org/zh/docs/latest/api/app">Electron 模组</a> 之外，您也可以访问 <a href="https://nodejs.org/dist/latest/docs/api/">Node.js 内置模块</a> 和所有通过 npm 安装的包。 另一方面，出于安全原因，渲染进程默认跑在网页页面上，而并非 Node.js里。</p><p>为了将 Electron 的不同类型的进程桥接在一起，我们需要使用被称为 <strong>预加载</strong> 的特殊脚本。</p><p><a href="https://www.electronjs.org/zh/docs/latest/tutorial/tutorial-preload">  electron预加载文档  </a></p></blockquote><ul><li>preload&#x2F;index.ts</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/* eslint-disable eslint-comments/disable-enable-pair */</span><br><span class="hljs-comment">/* eslint-disable @typescript-eslint/no-var-requires */</span><br><br><span class="hljs-keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>contextBridge.<span class="hljs-title function_">exposeInMainWorld</span>(<span class="hljs-string">&#x27;versions&#x27;</span>, &#123;<br>    <span class="hljs-attr">node</span>: <span class="hljs-function">() =&gt;</span> process.<span class="hljs-property">versions</span>.<span class="hljs-property">node</span>,<br>    <span class="hljs-attr">chrome</span>: <span class="hljs-function">() =&gt;</span> process.<span class="hljs-property">versions</span>.<span class="hljs-property">chrome</span>,<br>    <span class="hljs-attr">electron</span>: <span class="hljs-function">() =&gt;</span> process.<span class="hljs-property">versions</span>.<span class="hljs-property">electron</span><br>    <span class="hljs-comment">// 除函数之外，我们也可以暴露变量</span><br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ipcRenderer)<br><br></code></pre></td></tr></table></figure></li><li><p>plugins目录是vite-plugins，处理elctron开发环境与生产环境</p><ul><li>electron&#x2F;plugins&#x2F;vite-electron-build.ts</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs ts"># electron/plugins/vite-electron-build.<span class="hljs-property">ts</span><br><br><span class="hljs-comment">// 生产环境插件</span><br><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:fs&#x27;</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:path&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Plugin</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> electronBuilder <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;electron-builder&#x27;</span><br><span class="hljs-keyword">import</span> &#123; buildBackground &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/build&#x27;</span><br><span class="hljs-keyword">import</span> &#123; emptyDirectorySync, copyFolderSync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/handle-files&#x27;</span><br><br><span class="hljs-comment">// 源文件夹路径</span><br><span class="hljs-keyword">const</span> sourcePath = path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&#x27;dist&#x27;</span>)<br><br><span class="hljs-comment">// 目标文件夹路径</span><br><span class="hljs-keyword">const</span> targetPath = path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&#x27;./electron/dist&#x27;</span>)<br><br><span class="hljs-comment">// 导出 Vite 插件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">ElectronBuildPlugin</span> = (): <span class="hljs-function"><span class="hljs-params">Plugin</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;electron-build&#x27;</span>,<br>        <span class="hljs-attr">closeBundle</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// 清空目标目录</span><br>            <span class="hljs-title function_">emptyDirectorySync</span>(targetPath)<br><br>            <span class="hljs-comment">// 执行复制操作</span><br>            <span class="hljs-title function_">copyFolderSync</span>(sourcePath, targetPath)<br><br>            <span class="hljs-comment">// 构建 Electron 后台脚本</span><br>            <span class="hljs-title function_">buildBackground</span>(<span class="hljs-string">&#x27;electron/background.ts&#x27;</span>, <span class="hljs-string">&#x27;electron/dist/background.js&#x27;</span>)<br>            <span class="hljs-comment">// 构建 preload预加载</span><br>            <span class="hljs-title function_">buildBackground</span>(<span class="hljs-string">&#x27;electron/preload/index.ts&#x27;</span>, <span class="hljs-string">&#x27;electron/dist/preload/index.js&#x27;</span>)<br><br>            <span class="hljs-comment">// 读取 package.json 文件并更新其中的 &quot;main&quot; 字段</span><br>            <span class="hljs-keyword">const</span> packageJson = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;package.json&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>            packageJson.<span class="hljs-property">main</span> = <span class="hljs-string">&#x27;./background.js&#x27;</span><br><br>            <span class="hljs-comment">// 写入更新后的 package.json 到目标文件夹</span><br>            fs.<span class="hljs-title function_">writeFileSync</span>(<span class="hljs-string">&#x27;./electron/dist/package.json&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(packageJson, <span class="hljs-literal">null</span>, <span class="hljs-number">4</span>))<br><br>            <span class="hljs-comment">// 配置 Electron Builder 并执行构建</span><br>            <span class="hljs-keyword">const</span> outputDir = <span class="hljs-string">&#x27;./electron/dist/node_modules&#x27;</span><br><br>            <span class="hljs-comment">// 确保输出目录不存在时再创建</span><br>            <span class="hljs-keyword">if</span> (!fs.<span class="hljs-title function_">existsSync</span>(outputDir)) &#123;<br>                fs.<span class="hljs-title function_">mkdirSync</span>(outputDir)<br>            &#125;<br><br>            electronBuilder.<span class="hljs-title function_">build</span>(&#123;<br>                <span class="hljs-attr">config</span>: &#123;<br>                    <span class="hljs-attr">directories</span>: &#123;<br>                        <span class="hljs-attr">output</span>: path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&#x27;./electron/release&#x27;</span>),<br>                        <span class="hljs-attr">app</span>: targetPath<br>                    &#125;,<br>                    <span class="hljs-attr">asar</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-attr">appId</span>: <span class="hljs-string">&#x27;gzjstech.com&#x27;</span>,<br>                    <span class="hljs-attr">productName</span>: <span class="hljs-string">&#x27;vite-electron&#x27;</span>,<br>                    <span class="hljs-attr">nsis</span>: &#123;<br>                        <span class="hljs-attr">oneClick</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">perMachine</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">allowToChangeInstallationDirectory</span>: <span class="hljs-literal">true</span><br>                    &#125;<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>vite-electron-dev.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 开发环境插件</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">AddressInfo</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;net&#x27;</span><br><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:fs&#x27;</span><br><span class="hljs-keyword">import</span> &#123; spawn, <span class="hljs-keyword">type</span> <span class="hljs-title class_">ChildProcessWithoutNullStreams</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;child_process&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Plugin</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> &#123; buildBackground &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/build&#x27;</span><br><br><span class="hljs-comment">// 定义 Electron 进程变量</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">ElectronProcess</span>: <span class="hljs-title class_">ChildProcessWithoutNullStreams</span><br><br><span class="hljs-comment">// 导出 Vite 插件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">ElectronDevPlugin</span> = (): <span class="hljs-function"><span class="hljs-params">Plugin</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;electron-dev&#x27;</span>,<br>        <span class="hljs-attr">configureServer</span>: <span class="hljs-function">(<span class="hljs-params">server</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// 构建 Electron 后台脚本</span><br>            <span class="hljs-title function_">buildBackground</span>(<span class="hljs-string">&#x27;electron/background.ts&#x27;</span>, <span class="hljs-string">&#x27;electron/dist/background.js&#x27;</span>)<br><br>            <span class="hljs-comment">// 在服务器监听事件时</span><br>            server.<span class="hljs-property">httpServer</span>?.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;listening&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-comment">// 获取服务器地址信息</span><br>                <span class="hljs-keyword">const</span> addressInfo = server.<span class="hljs-property">httpServer</span>?.<span class="hljs-title function_">address</span>() <span class="hljs-keyword">as</span> <span class="hljs-title class_">AddressInfo</span><br>                <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">IP</span> = <span class="hljs-string">`http://localhost:<span class="hljs-subst">$&#123;addressInfo.port&#125;</span>`</span><br><br>                <span class="hljs-comment">// 启动 Electron 进程</span><br>                <span class="hljs-comment">// eslint-disable-next-line @typescript-eslint/no-var-requires</span><br>                <span class="hljs-title class_">ElectronProcess</span> = <span class="hljs-title function_">spawn</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>, [<br>                    <span class="hljs-string">&#x27;electron/dist/background.js&#x27;</span>,<br>                    <span class="hljs-variable constant_">IP</span><br>                ])<br><br>                <span class="hljs-comment">// 监听后台脚本文件的变化，重新启动 Electron 进程</span><br>                fs.<span class="hljs-title function_">watchFile</span>(<span class="hljs-string">&#x27;electron/background.ts&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-title class_">ElectronProcess</span>.<span class="hljs-title function_">kill</span>() <span class="hljs-comment">// 终止现有 Electron 进程</span><br>                    <span class="hljs-title function_">buildBackground</span>(<span class="hljs-string">&#x27;electron/background.ts&#x27;</span>, <span class="hljs-string">&#x27;electron/dist/background.js&#x27;</span>) <span class="hljs-comment">// 重新构建后台脚本</span><br>                    <span class="hljs-comment">// eslint-disable-next-line @typescript-eslint/no-var-requires</span><br>                    <span class="hljs-title class_">ElectronProcess</span> = <span class="hljs-title function_">spawn</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>, [<br>                        <span class="hljs-string">&#x27;electron/dist/background.js&#x27;</span>,<br>                        <span class="hljs-variable constant_">IP</span><br>                    ]) <span class="hljs-comment">// 启动新的 Electron 进程</span><br>                &#125;)<br><br>                <span class="hljs-comment">// 监听 Electron 进程的错误输出</span><br>                <span class="hljs-title class_">ElectronProcess</span>.<span class="hljs-property">stderr</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`electron process: <span class="hljs-subst">$&#123;data.toString()&#125;</span>`</span>)<br>                &#125;)<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="vite-config-ts"><a href="#vite-config-ts" class="headerlink" title="vite.config.ts"></a>vite.config.ts</h2></li></ul></li><li><p>引入我们编写的vite插件并注册</p></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; fileURLToPath, <span class="hljs-variable constant_">URL</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:url&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UnoCSS</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unocss/vite&#x27;</span><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElectronDevPlugin</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./electron/plugins/vite-electron-dev&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElectronBuildPlugin</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./electron/plugins/vite-electron-build&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>    <span class="hljs-attr">envPrefix</span>: <span class="hljs-string">&#x27;APPLET_&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>(), <span class="hljs-title class_">UnoCSS</span>(), <span class="hljs-title class_">ElectronDevPlugin</span>(), <span class="hljs-title class_">ElectronBuildPlugin</span>()],<br>    <span class="hljs-attr">base</span>: <span class="hljs-string">&#x27;./&#x27;</span>,<br>    <span class="hljs-attr">resolve</span>: &#123;<br>        <span class="hljs-attr">alias</span>: &#123;<br>            <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;./src&#x27;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>))<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">server</span>: &#123;<br>        <span class="hljs-attr">proxy</span>: &#123;<br>            <span class="hljs-comment">// 跨域代理</span><br>            <span class="hljs-string">&#x27;/apis&#x27;</span>: &#123;<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://&#x27;</span> + env.<span class="hljs-property">VUE_APP_BASE_API</span>,<br>                <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/apis/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            &#125;<br>            <span class="hljs-comment">// 代理 WebSocket 或 socket</span><br>            <span class="hljs-comment">// &#x27;/socket.io&#x27;: &#123;</span><br>            <span class="hljs-comment">//   target: &#x27;ws://localhost:3000&#x27;,</span><br>            <span class="hljs-comment">//   ws: true</span><br>            <span class="hljs-comment">//  &#125;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="preload注入后无法在web层获取相关变量"><a href="#preload注入后无法在web层获取相关变量" class="headerlink" title="preload注入后无法在web层获取相关变量"></a>preload注入后无法在web层获取相关变量</h2><ul><li><p>需要在scr下新建global.d.ts，并且在tsconfig.app.json里面引入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Method</span>, <span class="hljs-title class_">ResponseType</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">export</span> &#123;&#125;<br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">global</span> &#123;<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Window</span> &#123;<br>        <span class="hljs-comment">// 这里新增preload里面的注入变量，防止window.versions报错</span><br>        electronAPI?: <span class="hljs-built_in">any</span> <span class="hljs-comment">//全局变量名</span><br>        versions?: <span class="hljs-built_in">any</span> <span class="hljs-comment">//</span><br>    &#125;<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AxiosConfig</span> &#123;<br>        params?: <span class="hljs-built_in">any</span><br>        data?: <span class="hljs-built_in">any</span><br>        url?: <span class="hljs-built_in">string</span><br>        method?: <span class="hljs-title class_">Method</span><br>        headersType?: <span class="hljs-built_in">string</span><br>        responseType?: <span class="hljs-title class_">ResponseType</span><br>    &#125;<br><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IResponse</span>&lt;T = <span class="hljs-built_in">any</span>&gt; &#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-built_in">string</span><br>        <span class="hljs-attr">data</span>: T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span> ? T : T &amp; <span class="hljs-built_in">any</span><br>    &#125;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">AxiosHeaders</span> =<br>        | <span class="hljs-string">&#x27;application/json&#x27;</span><br>        | <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>        | <span class="hljs-string">&#x27;multipart/form-data&#x27;</span><br>&#125;<br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">window</span>: <span class="hljs-built_in">any</span><br><br></code></pre></td></tr></table></figure><ul><li><p>tsconfig.app.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;extends&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;@vue/tsconfig/tsconfig.dom.json&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// &quot;include&quot;: [&quot;env.d.ts&quot;, &quot;src/**/*&quot;, &quot;src/**/*.vue&quot;],</span><br>  <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/**/*.ts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;src/**/*.d.ts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;src/**/*.tsx&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;src/**/*.vue&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;electron/**/*.ts&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/**/__tests__/*&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;composite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;./src/*&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="打包注意点"><a href="#打包注意点" class="headerlink" title="打包注意点"></a>打包注意点</h2><ul><li>需要在根目录新建 .npmrc文件把下面的三行复制进去，这样打包才不会报错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">ELECTRON_MIRROR</span>=<span class="hljs-attr">https</span>:<span class="hljs-comment">//npmmirror.com/mirrors/electron/</span><br>registry=<span class="hljs-attr">https</span>:<span class="hljs-comment">//registry.npm.taobao.org/</span><br>electron_builder_binaries_mirror=<span class="hljs-attr">https</span>:<span class="hljs-comment">//npm.taobao.org/mirrors/electron-builder-binaries/</span><br></code></pre></td></tr></table></figure><blockquote><p>集成方案来自b站up主小满zs，与借鉴了electron-vite框架，在他们的基础上完善了这一版，通过vite生命周期实现打包完成vite后再打包electron，这样开发模式启动时就能带起electron</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用picgo配合easyImage搭建富文本粘贴自动上传</title>
    <link href="/2023/11/16/2023-11-16-%E4%BD%BF%E7%94%A8picgo%E9%85%8D%E5%90%88easyImage%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%B2%98%E8%B4%B4%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/11/16/2023-11-16-%E4%BD%BF%E7%94%A8picgo%E9%85%8D%E5%90%88easyImage%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%B2%98%E8%B4%B4%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="使用picgo配合easyImage搭建富文本粘贴自动上传"><a href="#使用picgo配合easyImage搭建富文本粘贴自动上传" class="headerlink" title="使用picgo配合easyImage搭建富文本粘贴自动上传"></a>使用picgo配合easyImage搭建富文本粘贴自动上传</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">body</span>：&#123;<span class="hljs-string">&quot;token&quot;</span>:<span class="hljs-string">&quot;你的简单图床apitoken&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://tuchuang.junsen.online//i/2023/11/16/iw82mw-1.png" alt="image-20231116114250759"></p><p>然后去typora 设置图片上传配置选择picgoapp</p><p><img src="https://tuchuang.junsen.online//i/2023/11/16/j03nxl-1.png" alt="image-20231116114902405"></p>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git配置</title>
    <link href="/2023/11/15/git%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/11/15/git%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="新环境配置git多配置"><a href="#新环境配置git多配置" class="headerlink" title="新环境配置git多配置"></a>新环境配置git多配置</h1><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;xxx@qq.com&#x27;</span> -f ~<span class="hljs-regexp">/.ssh/gi</span>tee_id_rsa<br>ssh-keygen -t rsa -C <span class="hljs-string">&#x27;xxx@qq.com&#x27;</span> -f ~<span class="hljs-regexp">/.ssh/gi</span>thub_id_rsa<br>ssh-keygen -t rsa -C <span class="hljs-string">&#x27;xxx@qq.com&#x27;</span> -f ~<span class="hljs-regexp">/.ssh/gi</span>tlab_id_rsa<br></code></pre></td></tr></table></figure><h2 id="config配置"><a href="#config配置" class="headerlink" title="config配置"></a>config配置</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># gitee</span><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/gi</span>tee_id_rsa<br><span class="hljs-comment"># github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/gi</span>thub_id_rsa<br><span class="hljs-comment"># 璟胜gitlab</span><br>Host gitlab.xxx.com<br>HostName gitlab.xxx.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/gi</span>thlab_id_rsa<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝塔使用webhook同步github代码</title>
    <link href="/2023/11/14/%E5%AE%9D%E5%A1%94%E4%BD%BF%E7%94%A8webhook%E5%90%8C%E6%AD%A5github%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/11/14/%E5%AE%9D%E5%A1%94%E4%BD%BF%E7%94%A8webhook%E5%90%8C%E6%AD%A5github%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>宝塔使用webhook同步github代码</p><h3 id="服务器设置git"><a href="#服务器设置git" class="headerlink" title="服务器设置git"></a>服务器设置git</h3><ul><li><p>先去 服务器上设置github用户名、邮箱、密码</p></li><li><p>然后获取rsa密钥用于代码拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;xxx&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;xxx@qq.com&quot;</span><br>git config --global user.password <span class="hljs-string">&quot;xxx&quot;</span><br><br><span class="hljs-comment">#生成公钥</span><br>ssh-keygen -t rsa<br><span class="hljs-comment">#获取公钥</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></li></ul><h2 id="宝塔软件商店搜索-webhook"><a href="#宝塔软件商店搜索-webhook" class="headerlink" title="宝塔软件商店搜索 webhook"></a>宝塔软件商店搜索 webhook</h2><p><img src="https://tuchuang.junsen.online//i/2023/11/14/stzy0l-1.png" alt="image-20231114174342741"></p><ul><li>点击设置添加hook，名称随便填，脚本复制以下的改下仓库地址和部署目录</li><li><strong>注意点：</strong> 仓库的代码需要是编译后的代码。可以利用git action自动编译</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">#输出当前时间</span><br><span class="hljs-built_in">date</span> --<span class="hljs-built_in">date</span>=<span class="hljs-string">&#x27;0 days ago&#x27;</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Start&quot;</span><br><span class="hljs-comment">#git项目路径</span><br>gitPath=<span class="hljs-string">&quot;/www/wwwroot/部署文件夹&quot;</span><br><span class="hljs-comment">#git 网址</span><br>gitHttp=<span class="hljs-string">&quot;仓库地址&quot;</span><br> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Web站点路径：<span class="hljs-variable">$gitPath</span>&quot;</span><br> <br><span class="hljs-comment">#判断项目路径是否存在</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$gitPath</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">cd</span> <span class="hljs-variable">$gitPath</span><br>        <span class="hljs-comment">#判断是否存在git目录</span><br>        <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;.git&quot;</span> ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;在该目录下克隆 git&quot;</span><br>                <span class="hljs-built_in">cd</span> ..<br>                git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$gitHttp</span> <br>                <span class="hljs-comment"># mv gittemp/.git .</span><br>                <span class="hljs-comment"># rm -rf gittemp </span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;End&quot;</span><br>        <span class="hljs-keyword">else</span>  <br>              <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;在该目录下拉取 git&quot;</span><br>              git pull 2&gt;&amp;1<br>              <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;End&quot;</span><br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;该项目路径不存在&quot;</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;End&quot;</span><br>        <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><ul><li><p>获取添加后的 hook地址去github仓库里的设置点击webhook添加宝塔生成的hook地址，填完后点击add webhook即可，第一次需要点击下宝塔webhook的测试按钮</p><p><img src="https://tuchuang.junsen.online//i/2023/11/14/t01js2-1.png" alt="image-20231114175358845"></p></li></ul><p><img src="https://tuchuang.junsen.online//i/2023/11/14/t0yp1j-1.png" alt="image-20231114175513385"></p><p><img src="https://tuchuang.junsen.online//i/2023/11/14/t111g1-1.png" alt="image-20231114175524611"></p>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>久违的博客记录</title>
    <link href="/2023/11/03/%E4%B9%85%E8%BF%9D%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/03/%E4%B9%85%E8%BF%9D%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>记录下：2023-11-03重新写博客</p><p><img src="https://tuchuang.junsen.online//i/2023/11/14/retmd0-1.jpg" alt="5848e4a37f5e4fb39f4c4384a9c27523"></p><p><img src="https://tuchuang.junsen.online//i/2023/11/14/sjxupp-1.jpg" alt="5c23d52f880511ebb6edd017c2d2eca2"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/03/hello-world/"/>
    <url>/2023/11/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
